generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model AllFollowers {
  id                  String    @id @default(uuid())
  date                DateTime  @default(now())
  twitter_followers   Int?
  tiktok_followers    Int?
  youtube_followers   Int?
  instagram_followers Int?
  linkedin_followers  Int?
  facebook_followers  Int?
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String    @unique

  @@index([workspaceId])
}

model AllMediaPost {
  id               String    @id @default(uuid())
  date             DateTime  @default(now())
  twitter_posted   Int?
  tiktok_posted    Int?
  youtube_posted   Int?
  instagram_posted Int?
  linkedin_posted  Int?
  facebook_posted  Int?
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String    @unique

  @@index([workspaceId])
}

model AllViews {
  id              String    @id @default(uuid())
  date            DateTime  @default(now())
  twitter_views   Int?
  tiktok_views    Int?
  youtube_views   Int?
  instagram_views Int?
  linkedin_views  Int?
  facebook_views  Int?
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     String    @unique

  @@index([workspaceId])
}

model AudioBlock {
  id                String          @id @default(uuid())
  file              File            @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId            String
  content_timeline  ContentTimeline @relation(fields: [contentTimelineId], references: [id], onDelete: Cascade)
  contentTimelineId String

  @@index([contentTimelineId])
  @@index([fileId])
}

// Automations
model Automation {
  id                              String                                  @id @default(uuid())
  createdAt                       DateTime                                @default(now())
  executions                      Int                                     @default(0)
  workspace                       Workspace                               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                     String                                  @unique
  discord_twitter_post            AutomationDiscordTwitterPost[]
  discord_instagram_post          AutomationDiscordInstagramPost[]
  discord_youtube_post            AutomationDiscordYoutubePost[]
  discord_facebook_post           AutomationDiscordFacebookPost[]
  discord_tiktok_post             AutomationDiscordTiktokPost[]
  discord_linkedin_post           AutomationDiscordLinkedinPost[]
  discord_weekly_analytics        AutomationDiscordWeeklyAnalytics[]
  discord_daily_analytics         AutomationDiscordDailyAnalytics[]
  slack_daily_analytics           AutomationSlackDailyAnalytics[]
  slack_weekly_analytics          AutomationSlackWeeklyAnalytics[]
  slack_twitter_post              AutomationSlackTwitterPost[]
  slack_instagram_post            AutomationSlackInstagramPost[]
  slack_facebook_post             AutomationSlackFacebookPost[]
  slack_youtube_post              AutomationSlackYoutubePost[]
  slack_tiktok_post               AutomationSlackTiktokPost[]
  slack_linkedin_post             AutomationSlackLinkedinPost[]
  facebook_post_to_slack          AutomationFacebookPostToSlack[]
  facebook_post_to_discord        AutomationFacebookPostToDiscord[]
  facebook_post_to_instagram      AutomationFacebookPostToInstagram[]
  facebook_post_to_linkedin       AutomationFacebookPostToLinkedin[]
  facebook_reel_to_tiktok         AutomationFacebookReelToTiktok[]
  facebook_reel_to_youtube_short  AutomationFacebookReelToYoutubeShort[]
  facebook_reel_to_instagram_reel AutomationFacebookReelToInstagramReel[]
  instagram_to_slack              AutomationInstagramToSlack[]
  instagram_to_discord            AutomationInstagramToDiscord[]
  instagram_to_twitter            AutomationInstagramToTwitter[]
  instagram_to_facebook           AutomationInstagramToFacebook[]
  instagram_to_linkedin           AutomationInstagramToLinkedin[]
  instagram_reel_to_tiktok        AutomationInstagramReelToTiktok[]
  instagram_reel_to_facebook_reel AutomationInstagramReelToFacebookReel[]
  instagram_reel_to_youtube_short AutomationInstagramReelToYoutubeShort[]
  linkedin_to_slack               AutomationLinkedinToSlack[]
  linkedin_to_discord             AutomationLinkedinToDiscord[]
  linkedin_to_tiktok              AutomationLinkedinToTiktok[]
  linkedin_to_instagram           AutomationLinkedinToInstagram[]
  linkedin_to_instagram_reel      AutomationLinkedinToInstagramReel[]
  linkedin_to_youtube_short       AutomationLinkedinToYoutubeShort[]
  linkedin_to_facebook            AutomationLinkedinToFacebook[]
  linkedin_to_twitter             AutomationLinkedinToTwitter[]
  tiktok_to_slack                 AutomationTiktokToSlack[]
  tiktok_to_discord               AutomationTiktokToDiscord[]
  tiktok_to_youtube_shorts        AutomationTiktokToYoutubeShorts[]
  tiktok_to_twitter               AutomationTiktokToTwitter[]
  tiktok_to_linkedin              AutomationTiktokToLinkedin[]
  tiktok_to_instagram_reel        AutomationTiktokToInstagramReel[]
  tiktok_to_facebook_reel         AutomationTiktokToFacebookReel[]
  twitter_to_slack                AutomationTwitterToSlack[]
  twitter_to_discord              AutomationTwitterToDiscord[]
  twitter_to_linkedin             AutomationTwitterToLinkedin[]
  twitter_to_instagram            AutomationTwitterToInstagram[]
  twitter_to_instagram_reel       AutomationTwitterToInstagramReel[]
  twitter_to_tiktok               AutomationTwitterToTiktok[]
  twitter_to_youtube_shorts       AutomationTwitterToYoutubeShorts[]
  twitter_to_facebook             AutomationTwitterToFacebook[]
  youtube_video_to_slack          AutomationYoutubeVideoToSlack[]
  youtube_short_to_slack          AutomationYoutubeShortToSlack[]
  youtube_video_to_discord        AutomationYoutubeVideoToDiscord[]
  youtube_short_to_discord        AutomationYoutubeShortToDiscord[]
  youtube_short_to_tiktok         AutomationYoutubeShortToTiktok[]
  youtube_short_to_instagram_reel AutomationYoutubeShortToInstagramReel[]
  youtube_short_to_twitter        AutomationYoutubeShortToTwitter[]
  youtube_short_to_linkedin       AutomationYoutubeShortToLinkedin[]
  youtube_short_to_facebook_reel  AutomationYoutubeShortToFacebookReel[]
  facebook_post_to_twitter        AutomationFacebookPostToTwitter[]
  pinterest_twitter_post          AutomationPinterestTwitterPost[]
  pinterest_youtube_short         AutomationPinterestYoutubeShort[]
  pinterest_linkedin_post         AutomationPinterestLinkedinPost[]
  pinterest_tiktok_post           AutomationPinterestTiktokPost[]
  pinterest_facebook_post         AutomationPinterestFacebookPost[]
  pinterest_instagram_post        AutomationPinterestInstagramPost[]
  twitch_stream_to_slack          AutomationTwitchStreamToSlack[]
  twitch_stream_to_discord        AutomationTwitchStreamToDiscord[]
  twitch_stream_to_twitter        AutomationTwitchStreamToTwitter[]
  twitch_stream_to_linkedin       AutomationTwitchStreamToLinkedin[]
  twitch_stream_to_facebook       AutomationTwitchStreamToFacebook[]

  @@index([workspaceId])
}

model AutomationRun {
  id                                      String                                 @id @default(uuid())
  run_at                                  DateTime                               @default(now())
  discord_daily_analytics                 AutomationDiscordDailyAnalytics?       @relation(fields: [automationDiscordDailyAnalyticsId], references: [id])
  automationDiscordDailyAnalyticsId       String?
  discord_weekly_anlaytics                AutomationDiscordWeeklyAnalytics?      @relation(fields: [automationDiscordWeeklyAnalyticsId], references: [id])
  automationDiscordWeeklyAnalyticsId      String?
  discord_twitter_post                    AutomationDiscordTwitterPost?          @relation(fields: [automationDiscordTwitterPostId], references: [id])
  automationDiscordTwitterPostId          String?
  discord_instagram_post                  AutomationDiscordInstagramPost?        @relation(fields: [automationDiscordInstagramPostId], references: [id])
  automationDiscordInstagramPostId        String?
  discord_youtube_post                    AutomationDiscordYoutubePost?          @relation(fields: [automationDiscordYoutubePostId], references: [id])
  automationDiscordYoutubePostId          String?
  discord_facebook_post                   AutomationDiscordFacebookPost?         @relation(fields: [automationDiscordFacebookPostId], references: [id])
  automationDiscordFacebookPostId         String?
  discord_tiktok_post                     AutomationDiscordTiktokPost?           @relation(fields: [automationDiscordTiktokPostId], references: [id])
  automationDiscordTiktokPostId           String?
  discord_linkedin_post                   AutomationDiscordLinkedinPost?         @relation(fields: [automationDiscordLinkedinPostId], references: [id])
  automationDiscordLinkedinPostId         String?
  slack_daily_analytics                   AutomationSlackDailyAnalytics?         @relation(fields: [automationSlackDailyAnalyticsId], references: [id])
  automationSlackDailyAnalyticsId         String?
  slack_weekly_analytics                  AutomationSlackWeeklyAnalytics?        @relation(fields: [automationSlackWeeklyAnalyticsId], references: [id])
  automationSlackWeeklyAnalyticsId        String?
  slack_twitter_post                      AutomationSlackTwitterPost?            @relation(fields: [automationSlackTwitterPostId], references: [id])
  automationSlackTwitterPostId            String?
  slack_instagram_post                    AutomationSlackInstagramPost?          @relation(fields: [automationSlackInstagramPostId], references: [id])
  automationSlackInstagramPostId          String?
  slack_youtube_post                      AutomationSlackYoutubePost?            @relation(fields: [automationSlackYoutubePostId], references: [id])
  automationSlackYoutubePostId            String?
  slack_facebook_post                     AutomationSlackFacebookPost?           @relation(fields: [automationSlackFacebookPostId], references: [id])
  automationSlackFacebookPostId           String?
  slack_tiktok_post                       AutomationSlackTiktokPost?             @relation(fields: [automationSlackTiktokPostId], references: [id])
  automationSlackTiktokPostId             String?
  slack_linkedin_post                     AutomationSlackLinkedinPost?           @relation(fields: [automationSlackLinkedinPostId], references: [id])
  automationSlackLinkedinPostId           String?
  facebook_post_to_slack                  AutomationFacebookPostToSlack?         @relation(fields: [automationFacebookPostToSlackId], references: [id])
  automationFacebookPostToSlackId         String?
  facebook_post_to_discord                AutomationFacebookPostToDiscord?       @relation(fields: [automationFacebookPostToDiscordId], references: [id])
  automationFacebookPostToDiscordId       String?
  facebook_post_to_instagram              AutomationFacebookPostToInstagram?     @relation(fields: [automationFacebookPostToInstagramId], references: [id])
  automationFacebookPostToInstagramId     String?
  facebook_post_to_linkedin               AutomationFacebookPostToLinkedin?      @relation(fields: [automationFacebookPostToLinkedinId], references: [id])
  automationFacebookPostToLinkedinId      String?
  facebook_reel_to_instagram_reel         AutomationFacebookReelToInstagramReel? @relation(fields: [automationFacebookReelToInstagramReelId], references: [id])
  automationFacebookReelToInstagramReelId String?
  facebook_reel_to_youtube_short          AutomationFacebookReelToYoutubeShort?  @relation(fields: [automationFacebookReelToYoutubeShortId], references: [id])
  automationFacebookReelToYoutubeShortId  String?
  facebook_reel_to_tiktok                 AutomationFacebookReelToTiktok?        @relation(fields: [automationFacebookReelToTiktokId], references: [id])
  automationFacebookReelToTiktokId        String?
  facebook_post_to_twitter                AutomationFacebookPostToTwitter?       @relation(fields: [automationFacebookPostToTwitterId], references: [id])
  automationFacebookPostToTwitterId       String?
  instagram_to_slack                      AutomationInstagramToSlack?            @relation(fields: [automationInstagramToSlackId], references: [id])
  automationInstagramToSlackId            String?
  instagram_to_discord                    AutomationInstagramToDiscord?          @relation(fields: [automationInstagramToDiscordId], references: [id])
  automationInstagramToDiscordId          String?
  instagram_to_twitter                    AutomationInstagramToTwitter?          @relation(fields: [automationInstagramToTwitterId], references: [id])
  automationInstagramToTwitterId          String?
  instagram_to_facebook                   AutomationInstagramToFacebook?         @relation(fields: [automationInstagramToFacebookId], references: [id])
  automationInstagramToFacebookId         String?
  instagram_to_linkedin                   AutomationInstagramToLinkedin?         @relation(fields: [automationInstagramToLinkedinId], references: [id])
  automationInstagramToLinkedinId         String?
  instagram_reel_to_tiktok                AutomationInstagramReelToTiktok?       @relation(fields: [automationInstagramReelToTiktokId], references: [id])
  automationInstagramReelToTiktokId       String?
  instagram_reel_to_facebook_reel         AutomationInstagramReelToFacebookReel? @relation(fields: [automationInstagramReelToFacebookReelId], references: [id])
  automationInstagramReelToFacebookReelId String?
  instagram_reel_to_youtube_short         AutomationInstagramReelToYoutubeShort? @relation(fields: [automationInstagramReelToYoutubeShortId], references: [id])
  automationInstagramReelToYoutubeShortId String?
  linkedin_to_slack                       AutomationLinkedinToSlack?             @relation(fields: [automationLinkedinToSlackId], references: [id])
  automationLinkedinToSlackId             String?
  linkedin_to_discord                     AutomationLinkedinToDiscord?           @relation(fields: [automationLinkedinToDiscordId], references: [id])
  automationLinkedinToDiscordId           String?
  linkedin_to_tiktok                      AutomationLinkedinToTiktok?            @relation(fields: [automationLinkedinToTiktokId], references: [id])
  automationLinkedinToTiktokId            String?
  linkedin_to_instagram                   AutomationLinkedinToInstagram?         @relation(fields: [automationLinkedinToInstagramId], references: [id])
  automationLinkedinToInstagramId         String?
  linkedin_to_instagram_reel              AutomationLinkedinToInstagramReel?     @relation(fields: [automationLinkedinToInstagramReelId], references: [id])
  automationLinkedinToInstagramReelId     String?
  linkedin_to_youtube_short               AutomationLinkedinToYoutubeShort?      @relation(fields: [automationLinkedinToYoutubeShortId], references: [id])
  automationLinkedinToYoutubeShortId      String?
  linkedin_to_facebook                    AutomationLinkedinToFacebook?          @relation(fields: [automationLinkedinToFacebookId], references: [id])
  automationLinkedinToFacebookId          String?
  linkedin_to_twitter                     AutomationLinkedinToTwitter?           @relation(fields: [automationLinkedinToTwitterId], references: [id])
  automationLinkedinToTwitterId           String?
  tiktok_to_slack                         AutomationTiktokToSlack?               @relation(fields: [automationTiktokToSlackId], references: [id])
  automationTiktokToSlackId               String?
  tiktok_to_discord                       AutomationTiktokToDiscord?             @relation(fields: [automationTiktokToDiscordId], references: [id])
  automationTiktokToDiscordId             String?
  tiktok_to_youtube_shorts                AutomationTiktokToYoutubeShorts?       @relation(fields: [automationTiktokToYoutubeShortsId], references: [id])
  automationTiktokToYoutubeShortsId       String?
  tiktok_to_twitter                       AutomationTiktokToTwitter?             @relation(fields: [automationTiktokToTwitterId], references: [id])
  automationTiktokToTwitterId             String?
  tiktok_to_linkedin                      AutomationTiktokToLinkedin?            @relation(fields: [automationTiktokToLinkedinId], references: [id])
  automationTiktokToLinkedinId            String?
  tiktok_to_instagram_reel                AutomationTiktokToInstagramReel?       @relation(fields: [automationTiktokToInstagramReelId], references: [id])
  automationTiktokToInstagramReelId       String?
  tiktok_to_facebook_reel                 AutomationTiktokToFacebookReel?        @relation(fields: [automationTiktokToFacebookReelId], references: [id])
  automationTiktokToFacebookReelId        String?
  twitter_to_slack                        AutomationTwitterToSlack?              @relation(fields: [automationTwitterToSlackId], references: [id])
  automationTwitterToSlackId              String?
  twitter_to_discord                      AutomationTwitterToDiscord?            @relation(fields: [automationTwitterToDiscordId], references: [id])
  automationTwitterToDiscordId            String?
  twitter_to_linkedin                     AutomationTwitterToLinkedin?           @relation(fields: [automationTwitterToLinkedinId], references: [id])
  automationTwitterToLinkedinId           String?
  twitter_to_instagram                    AutomationTwitterToInstagram?          @relation(fields: [automationTwitterToInstagramId], references: [id])
  automationTwitterToInstagramId          String?
  twitter_to_instagram_reel               AutomationTwitterToInstagramReel?      @relation(fields: [automationTwitterToInstagramReelId], references: [id])
  automationTwitterToInstagramReelId      String?
  twitter_to_tiktok                       AutomationTwitterToTiktok?             @relation(fields: [automationTwitterToTiktokId], references: [id])
  automationTwitterToTiktokId             String?
  twitter_to_youtube_shorts               AutomationTwitterToYoutubeShorts?      @relation(fields: [automationTwitterToYoutubeShortsId], references: [id])
  automationTwitterToYoutubeShortsId      String?
  twitter_to_facebook                     AutomationTwitterToFacebook?           @relation(fields: [automationTwitterToFacebookId], references: [id])
  automationTwitterToFacebookId           String?
  youtube_video_to_slack                  AutomationYoutubeVideoToSlack?         @relation(fields: [automationYoutubeVideoToSlackId], references: [id])
  automationYoutubeVideoToSlackId         String?
  youtube_short_to_slack                  AutomationYoutubeShortToSlack?         @relation(fields: [automationYoutubeShortToSlackId], references: [id])
  automationYoutubeShortToSlackId         String?
  youtube_video_to_discord                AutomationYoutubeVideoToDiscord?       @relation(fields: [automationYoutubeVideoToDiscordId], references: [id])
  automationYoutubeVideoToDiscordId       String?
  youtube_short_to_discord                AutomationYoutubeShortToDiscord?       @relation(fields: [automationYoutubeShortToDiscordId], references: [id])
  automationYoutubeShortToDiscordId       String?
  youtube_short_to_tiktok                 AutomationYoutubeShortToTiktok?        @relation(fields: [automationYoutubeShortToTiktokId], references: [id])
  automationYoutubeShortToTiktokId        String?
  youtube_short_to_instagram_reel         AutomationYoutubeShortToInstagramReel? @relation(fields: [automationYoutubeShortToInstagramReelId], references: [id])
  automationYoutubeShortToInstagramReelId String?
  youtube_short_to_twitter                AutomationYoutubeShortToTwitter?       @relation(fields: [automationYoutubeShortToTwitterId], references: [id])
  automationYoutubeShortToTwitterId       String?
  youtube_short_to_linkedin               AutomationYoutubeShortToLinkedin?      @relation(fields: [automationYoutubeShortToLinkedinId], references: [id])
  automationYoutubeShortToLinkedinId      String?
  youtube_short_to_facebook_reel          AutomationYoutubeShortToFacebookReel?  @relation(fields: [automationYoutubeShortToFacebookReelId], references: [id])
  automationYoutubeShortToFacebookReelId  String?
  pinterest_twitter_post                  AutomationPinterestTwitterPost?        @relation(fields: [automationPinterestTwitterPostId], references: [id])
  automationPinterestTwitterPostId        String?
  pinterest_youtube_short                 AutomationPinterestYoutubeShort?       @relation(fields: [automationPinterestYoutubeShortId], references: [id])
  automationPinterestYoutubeShortId       String?
  pinterest_linkedin_post                 AutomationPinterestLinkedinPost?       @relation(fields: [automationPinterestLinkedinPostId], references: [id])
  automationPinterestLinkedinPostId       String?
  pinterest_tiktok_post                   AutomationPinterestTiktokPost?         @relation(fields: [automationPinterestTiktokPostId], references: [id])
  automationPinterestTiktokPostId         String?
  pinterest_facebook_post                 AutomationPinterestFacebookPost?       @relation(fields: [automationPinterestFacebookPostId], references: [id])
  automationPinterestFacebookPostId       String?
  pinterset_instagram_post                AutomationPinterestInstagramPost?      @relation(fields: [automationPinterestInstagramPostId], references: [id])
  automationPinterestInstagramPostId      String?
  twitch_stream_to_slack                  AutomationTwitchStreamToSlack?         @relation(fields: [automationTwitchStreamToSlackId], references: [id])
  automationTwitchStreamToSlackId         String?
  twitch_stream_to_discord                AutomationTwitchStreamToDiscord?       @relation(fields: [automationTwitchStreamToDiscordId], references: [id])
  automationTwitchStreamToDiscordId       String?
  twitch_stream_to_twitter                AutomationTwitchStreamToTwitter?       @relation(fields: [automationTwitchStreamToTwitterId], references: [id])
  automationTwitchStreamToTwitterId       String?
  twitch_stream_to_linkedin               AutomationTwitchStreamToLinkedin?      @relation(fields: [automationTwitchStreamToLinkedinId], references: [id])
  automationTwitchStreamToLinkedinId      String?
  twitch_stream_to_facebook               AutomationTwitchStreamToFacebook?      @relation(fields: [automationTwitchStreamToFacebookId], references: [id])
  automationTwitchStreamToFacebookId      String?
}

model AutomationLogs {
  id                                      String                                 @id @default(uuid())
  posted_id                               String
  discord_daily_analytics                 AutomationDiscordDailyAnalytics?       @relation(fields: [automationDiscordDailyAnalyticsId], references: [id])
  automationDiscordDailyAnalyticsId       String?
  discord_weekly_analytics                AutomationDiscordWeeklyAnalytics?      @relation(fields: [automationDiscordWeeklyAnalyticsId], references: [id])
  automationDiscordWeeklyAnalyticsId      String?
  discord_twitter_post                    AutomationDiscordTwitterPost?          @relation(fields: [automationDiscordTwitterPostId], references: [id])
  automationDiscordTwitterPostId          String?
  discord_instagram_post                  AutomationDiscordInstagramPost?        @relation(fields: [automationDiscordInstagramPostId], references: [id])
  automationDiscordInstagramPostId        String?
  discord_youtube_post                    AutomationDiscordYoutubePost?          @relation(fields: [automationDiscordYoutubePostId], references: [id])
  automationDiscordYoutubePostId          String?
  discord_facebook_post                   AutomationDiscordFacebookPost?         @relation(fields: [automationDiscordFacebookPostId], references: [id])
  automationDiscordFacebookPostId         String?
  discord_tiktok_post                     AutomationDiscordTiktokPost?           @relation(fields: [automationDiscordTiktokPostId], references: [id])
  automationDiscordTiktokPostId           String?
  discord_linkedin_post                   AutomationDiscordLinkedinPost?         @relation(fields: [automationDiscordLinkedinPostId], references: [id])
  automationDiscordLinkedinPostId         String?
  slack_daily_analytics                   AutomationSlackDailyAnalytics?         @relation(fields: [automationSlackDailyAnalyticsId], references: [id])
  automationSlackDailyAnalyticsId         String?
  slack_weekly_analytics                  AutomationSlackWeeklyAnalytics?        @relation(fields: [automationSlackWeeklyAnalyticsId], references: [id])
  automationSlackWeeklyAnalyticsId        String?
  slack_twitter_post                      AutomationSlackTwitterPost?            @relation(fields: [automationSlackTwitterPostId], references: [id])
  automationSlackTwitterPostId            String?
  slack_youtube_post                      AutomationSlackYoutubePost?            @relation(fields: [automationSlackYoutubePostId], references: [id])
  automationSlackYoutubePostId            String?
  slack_facebook_post                     AutomationSlackFacebookPost?           @relation(fields: [automationSlackFacebookPostId], references: [id])
  automationSlackFacebookPostId           String?
  slack_tiktok_post                       AutomationSlackTiktokPost?             @relation(fields: [automationSlackTiktokPostId], references: [id])
  automationSlackTiktokPostId             String?
  slack_linkedin_post                     AutomationSlackLinkedinPost?           @relation(fields: [automationSlackLinkedinPostId], references: [id])
  automationSlackLinkedinPostId           String?
  facebook_post_to_slack                  AutomationFacebookPostToSlack?         @relation(fields: [automationFacebookPostToSlackId], references: [id])
  automationFacebookPostToSlackId         String?
  facebook_post_to_discord                AutomationFacebookPostToDiscord?       @relation(fields: [automationFacebookPostToDiscordId], references: [id])
  automationFacebookPostToDiscordId       String?
  facebook_post_to_instagram              AutomationFacebookPostToInstagram?     @relation(fields: [automationFacebookPostToInstagramId], references: [id])
  automationFacebookPostToInstagramId     String?
  facebook_post_to_linkedin               AutomationFacebookPostToLinkedin?      @relation(fields: [automationFacebookPostToLinkedinId], references: [id])
  automationFacebookPostToLinkedinId      String?
  facebook_reel_to_instagram_reel         AutomationFacebookReelToInstagramReel? @relation(fields: [automationFacebookReelToInstagramReelId], references: [id])
  automationFacebookReelToInstagramReelId String?
  facebook_reel_to_youtube_short          AutomationFacebookReelToYoutubeShort?  @relation(fields: [automationFacebookReelToYoutubeShortId], references: [id])
  automationFacebookReelToYoutubeShortId  String?
  facebook_reel_to_tiktok                 AutomationFacebookReelToTiktok?        @relation(fields: [automationFacebookReelToTiktokId], references: [id])
  automationFacebookReelToTiktokId        String?
  facebook_post_to_twitter                AutomationFacebookPostToTwitter?       @relation(fields: [automationFacebookPostToTwitterId], references: [id])
  automationFacebookPostToTwitterId       String?
  instagram_to_slack                      AutomationInstagramToSlack?            @relation(fields: [automationInstagramToSlackId], references: [id])
  automationInstagramToSlackId            String?
  instagram_to_disocrd                    AutomationInstagramToDiscord?          @relation(fields: [automationInstagramToDiscordId], references: [id])
  automationInstagramToDiscordId          String?
  instagram_to_twitter                    AutomationInstagramToTwitter?          @relation(fields: [automationInstagramToTwitterId], references: [id])
  automationInstagramToTwitterId          String?
  instagram_to_facebook                   AutomationInstagramToFacebook?         @relation(fields: [automationInstagramToFacebookId], references: [id])
  automationInstagramToFacebookId         String?
  instagram_to_linkedin                   AutomationInstagramToLinkedin?         @relation(fields: [automationInstagramToLinkedinId], references: [id])
  automationInstagramToLinkedinId         String?
  instagram_reel_to_tiktok                AutomationInstagramReelToTiktok?       @relation(fields: [automationInstagramReelToTiktokId], references: [id])
  automationInstagramReelToTiktokId       String?
  instagram_reel_to_facebook_reel         AutomationInstagramReelToFacebookReel? @relation(fields: [automationInstagramReelToFacebookReelId], references: [id])
  automationInstagramReelToFacebookReelId String?
  instagram_reel_to_youtube_short         AutomationInstagramReelToYoutubeShort? @relation(fields: [automationInstagramReelToYoutubeShortId], references: [id])
  automationInstagramReelToYoutubeShortId String?
  linkedin_to_slack                       AutomationLinkedinToSlack?             @relation(fields: [automationLinkedinToSlackId], references: [id])
  automationLinkedinToSlackId             String?
  linkedin_to_discord                     AutomationLinkedinToDiscord?           @relation(fields: [automationLinkedinToDiscordId], references: [id])
  automationLinkedinToDiscordId           String?
  linkedin_to_tiktok                      AutomationLinkedinToTiktok?            @relation(fields: [automationLinkedinToTiktokId], references: [id])
  automationLinkedinToTiktokId            String?
  linkedin_to_instagram                   AutomationLinkedinToInstagram?         @relation(fields: [automationLinkedinToInstagramId], references: [id])
  automationLinkedinToInstagramId         String?
  linkedin_to_instagram_reel              AutomationLinkedinToInstagramReel?     @relation(fields: [automationLinkedinToInstagramReelId], references: [id])
  automationLinkedinToInstagramReelId     String?
  linkedin_to_youtube_short               AutomationLinkedinToYoutubeShort?      @relation(fields: [automationLinkedinToYoutubeShortId], references: [id])
  automationLinkedinToYoutubeShortId      String?
  linkedin_to_facebook                    AutomationLinkedinToFacebook?          @relation(fields: [automationLinkedinToFacebookId], references: [id])
  automationLinkedinToFacebookId          String?
  linkedin_to_twitter                     AutomationLinkedinToTwitter?           @relation(fields: [automationLinkedinToTwitterId], references: [id])
  automationLinkedinToTwitterId           String?
  tiktok_to_slack                         AutomationTiktokToSlack?               @relation(fields: [automationTiktokToSlackId], references: [id])
  automationTiktokToSlackId               String?
  tiktok_to_discord                       AutomationTiktokToDiscord?             @relation(fields: [automationTiktokToDiscordId], references: [id])
  automationTiktokToDiscordId             String?
  tiktok_to_youtube_shorts                AutomationTiktokToYoutubeShorts?       @relation(fields: [automationTiktokToYoutubeShortsId], references: [id])
  automationTiktokToYoutubeShortsId       String?
  tiktok_to_twitter                       AutomationTiktokToTwitter?             @relation(fields: [automationTiktokToTwitterId], references: [id])
  automationTiktokToTwitterId             String?
  tiktok_to_linkedin                      AutomationTiktokToLinkedin?            @relation(fields: [automationTiktokToLinkedinId], references: [id])
  automationTiktokToLinkedinId            String?
  tiktok_to_instagram_reel                AutomationTiktokToInstagramReel?       @relation(fields: [automationTiktokToInstagramReelId], references: [id])
  automationTiktokToInstagramReelId       String?
  tiktok_to_facebook_reel                 AutomationTiktokToFacebookReel?        @relation(fields: [automationTiktokToFacebookReelId], references: [id])
  automationTiktokToFacebookReelId        String?
  twitter_to_slack                        AutomationTwitterToSlack?              @relation(fields: [automationTwitterToSlackId], references: [id])
  automationTwitterToSlackId              String?
  twitter_to_discord                      AutomationTwitterToDiscord?            @relation(fields: [automationTwitterToDiscordId], references: [id])
  automationTwitterToDiscordId            String?
  twitter_to_linkedin                     AutomationTwitterToLinkedin?           @relation(fields: [automationTwitterToLinkedinId], references: [id])
  automationTwitterToLinkedinId           String?
  twitter_to_instagram                    AutomationTwitterToInstagram?          @relation(fields: [automationTwitterToInstagramId], references: [id])
  automationTwitterToInstagramId          String?
  twitter_to_instagram_reel               AutomationTwitterToInstagramReel?      @relation(fields: [automationTwitterToInstagramReelId], references: [id])
  automationTwitterToInstagramReelId      String?
  twitter_to_tiktok                       AutomationTwitterToTiktok?             @relation(fields: [automationTwitterToTiktokId], references: [id])
  automationTwitterToTiktokId             String?
  twitter_to_youtube_shorts               AutomationTwitterToYoutubeShorts?      @relation(fields: [automationTwitterToYoutubeShortsId], references: [id])
  automationTwitterToYoutubeShortsId      String?
  twitter_to_facebook                     AutomationTwitterToFacebook?           @relation(fields: [automationTwitterToFacebookId], references: [id])
  automationTwitterToFacebookId           String?
  youtube_video_to_slack                  AutomationYoutubeVideoToSlack?         @relation(fields: [automationYoutubeVideoToSlackId], references: [id])
  automationYoutubeVideoToSlackId         String?
  youtube_short_to_slack                  AutomationYoutubeShortToSlack?         @relation(fields: [automationYoutubeShortToSlackId], references: [id])
  automationYoutubeShortToSlackId         String?
  youtube_video_to_discord                AutomationYoutubeVideoToDiscord?       @relation(fields: [automationYoutubeVideoToDiscordId], references: [id])
  automationYoutubeVideoToDiscordId       String?
  youtube_short_to_discord                AutomationYoutubeShortToDiscord?       @relation(fields: [automationYoutubeShortToDiscordId], references: [id])
  automationYoutubeShortToDiscordId       String?
  youtube_short_to_tiktok                 AutomationYoutubeShortToTiktok?        @relation(fields: [automationYoutubeShortToTiktokId], references: [id])
  automationYoutubeShortToTiktokId        String?
  youtube_short_to_instagram_reel         AutomationYoutubeShortToInstagramReel? @relation(fields: [automationYoutubeShortToInstagramReelId], references: [id])
  automationYoutubeShortToInstagramReelId String?
  youtube_short_to_twitter                AutomationYoutubeShortToTwitter?       @relation(fields: [automationYoutubeShortToTwitterId], references: [id])
  automationYoutubeShortToTwitterId       String?
  youtube_short_to_linkedin               AutomationYoutubeShortToLinkedin?      @relation(fields: [automationYoutubeShortToLinkedinId], references: [id])
  automationYoutubeShortToLinkedinId      String?
  youtube_short_to_facebook_reel          AutomationYoutubeShortToFacebookReel?  @relation(fields: [automationYoutubeShortToFacebookReelId], references: [id])
  automationYoutubeShortToFacebookReelId  String?
  pinterest_twitter_post                  AutomationPinterestTwitterPost?        @relation(fields: [automationPinterestTwitterPostId], references: [id])
  automationPinterestTwitterPostId        String?
  pinterest_youtube_short                 AutomationPinterestYoutubeShort?       @relation(fields: [automationPinterestYoutubeShortId], references: [id])
  automationPinterestYoutubeShortId       String?
  pinterest_linkedin_post                 AutomationPinterestLinkedinPost?       @relation(fields: [automationPinterestLinkedinPostId], references: [id])
  automationPinterestLinkedinPostId       String?
  pinterest_tiktok_post                   AutomationPinterestTiktokPost?         @relation(fields: [automationPinterestTiktokPostId], references: [id])
  automationPinterestTiktokPostId         String?
  pinterest_facebook_post                 AutomationPinterestFacebookPost?       @relation(fields: [automationPinterestFacebookPostId], references: [id])
  automationPinterestFacebookPostId       String?
  pinterest_instagram_post                AutomationPinterestInstagramPost?      @relation(fields: [automationPinterestInstagramPostId], references: [id])
  automationPinterestInstagramPostId      String?
  twitch_stream_to_slack                  AutomationTwitchStreamToSlack?         @relation(fields: [automationTwitchStreamToSlackId], references: [id])
  automationTwitchStreamToSlackId         String?
  twitch_stream_to_discord                AutomationTwitchStreamToDiscord?       @relation(fields: [automationTwitchStreamToDiscordId], references: [id])
  automationTwitchStreamToDiscordId       String?
  twitch_stream_to_twitter                AutomationTwitchStreamToTwitter?       @relation(fields: [automationTwitchStreamToTwitterId], references: [id])
  automationTwitchStreamToTwitterId       String?
  twitch_stream_to_linkedin               AutomationTwitchStreamToLinkedin?      @relation(fields: [automationTwitchStreamToLinkedinId], references: [id])
  automationTwitchStreamToLinkedinId      String?
  twitch_stream_to_facebook               AutomationTwitchStreamToFacebook?      @relation(fields: [automationTwitchStreamToFacebookId], references: [id])
  automationTwitchStreamToFacebookId      String?
  slack_instagram_post                    AutomationSlackInstagramPost?          @relation(fields: [automationSlackInstagramPostId], references: [id])
  automationSlackInstagramPostId          String?
}

model AutomationDiscordDailyAnalytics {
  id                  String           @id @default(uuid())
  title               String           @default("Receive daily analytics on Discord")
  created_at          DateTime         @default(now())
  poll_time           Int              @default(5)
  include_actual_post Boolean          @default(true)
  facebook_included   Boolean          @default(false)
  instagram_included  Boolean          @default(false)
  youtube_included    Boolean          @default(false)
  linkedin_included   Boolean          @default(false)
  twitter_included    Boolean          @default(false)
  tiktok_included     Boolean          @default(false)
  disperse_tested     Boolean          @default(false)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  automation_id       String           @default("discord-daily-analytics")
  active              Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  runs                AutomationRun[]
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([discordId])
  @@index([id])
}

model AutomationDiscordWeeklyAnalytics {
  id                  String           @id @default(uuid())
  title               String           @default("Receive weekly analytics on Discord")
  created_at          DateTime         @default(now())
  poll_time           Int              @default(5)
  runs                AutomationRun[]
  automation_id       String           @default("discord-weekly-analytics")
  include_actual_post Boolean          @default(true)
  facebook_included   Boolean          @default(false)
  instagram_included  Boolean          @default(false)
  youtube_included    Boolean          @default(false)
  linkedin_included   Boolean          @default(false)
  twitter_included    Boolean          @default(false)
  tiktok_included     Boolean          @default(false)
  disperse_tested     Boolean          @default(false)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  active              Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  logs                AutomationLogs[]

  @@index([discordId])
  @@index([automationId])
  @@index([id])
}

model AutomationDiscordTwitterPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Twitter tweet to Discord")
  automation_id       String           @default("discord-twitter-post")
  active              Boolean          @default(false)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  poll_time           Int              @default(5)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  twitter             Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId           String?
  twitter_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([discordId])
  @@index([twitterId])
  @@index([id])
}

model AutomationDiscordInstagramPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Instagram post to Discord")
  automation_id       String           @default("discord-instagram-post")
  active              Boolean          @default(false)
  created_at          DateTime         @default(now())
  poll_time           Int              @default(5)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  instagram           Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId         String?
  instagram_tested    Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([discordId])
  @@index([instagramId])
}

model AutomationDiscordYoutubePost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Youtube video to Discord")
  automation_id       String           @default("discord-youtube-post")
  active              Boolean          @default(false)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  poll_time           Int              @default(5)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  youtube             Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId           String?
  youtube_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([discordId])
  @@index([youtubeId])
}

model AutomationDiscordFacebookPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Facebook post to Discord")
  automation_id       String           @default("discord-facebook-post")
  active              Boolean          @default(false)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  facebook            Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId          String?
  facebook_tested     Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([discordId])
}

model AutomationDiscordTiktokPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new TikTok video to Discord")
  automation_id       String           @default("discord-tiktok-post")
  active              Boolean          @default(false)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  include_actual_post Boolean          @default(true)
  poll_time           Int              @default(5)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  tiktok              Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId            String?
  tiktok_tested       Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([discordId])
  @@index([tiktokId])
}

model AutomationDiscordLinkedinPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Linkedin post to Discord")
  automation_id       String           @default("discord-linkedin-post")
  active              Boolean          @default(false)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  include_actual_post Boolean          @default(true)
  poll_time           Int              @default(5)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  linkedin            Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId          String?
  linkedin_tested     Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([discordId])
}

model AutomationSlackDailyAnalytics {
  id                  String           @id @default(uuid())
  title               String           @default("Receive daily analytics on Slack")
  automation_id       String           @default("slack-daily-analytics")
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  facebook_included   Boolean          @default(false)
  instagram_included  Boolean          @default(false)
  youtube_included    Boolean          @default(false)
  linkedin_included   Boolean          @default(false)
  twitter_included    Boolean          @default(false)
  tiktok_included     Boolean          @default(false)
  disperse_tested     Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  active              Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([slackId])
}

model AutomationSlackWeeklyAnalytics {
  id                  String           @id @default(uuid())
  title               String           @default("Receive weekly analytics on Slack")
  automation_id       String           @default("slack-weekly-analytics")
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  facebook_included   Boolean          @default(false)
  instagram_included  Boolean          @default(false)
  youtube_included    Boolean          @default(false)
  linkedin_included   Boolean          @default(false)
  twitter_included    Boolean          @default(false)
  tiktok_included     Boolean          @default(false)
  disperse_tested     Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  active              Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([slackId])
  @@index([automationId])
}

model AutomationSlackTwitterPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Twitter tweet to Slack")
  automation_id       String           @default("slack-twitter-post")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  twitter             Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId           String?
  twitter_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([slackId])
  @@index([twitterId])
}

model AutomationSlackInstagramPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Instagram post to Slack")
  automation_id       String           @default("slack-instagram-post")
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  active              Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  instagram           Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId         String?
  instagram_tested    Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([instagramId])
  @@index([automationId])
  @@index([slackId])
}

model AutomationSlackYoutubePost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Youtube video to Slack")
  automation_id       String           @default("slack-youtube-post")
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  active              Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  youtube             Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId           String?
  youtube_tested      Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([slackId])
}

model AutomationSlackFacebookPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Facebook post to Slack")
  automation_id       String           @default("slack-facebook-post")
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  active              Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  facebook            Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId          String?
  facebook_tested     Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([slackId])
}

model AutomationSlackTiktokPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new TikTok video to Slack")
  automation_id       String           @default("slack-tiktok-post")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  tiktok              Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId            String?
  tiktok_tested       Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([tiktokId])
  @@index([slackId])
}

model AutomationSlackLinkedinPost {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Linkedin post to Slack")
  automation_id       String           @default("slack-linkedin-post")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  linkedin            Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId          String?
  linkedin_tested     Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  logs                AutomationLogs[]

  @@index([slackId])
  @@index([linkedinId])
  @@index([automationId])
}

model AutomationFacebookPostToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Facebook post to Slack")
  automation_id       String           @default("facebook-post-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(false)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  facebook            Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId          String?
  facebook_tested     Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([facebookId])
  @@index([automationId])
  @@index([slackId])
}

model AutomationFacebookPostToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Facebook post to Discord")
  automation_id       String           @default("facebook-post-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  facebook            Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId          String?
  facebook_tested     Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([discordId])
}

model AutomationFacebookPostToInstagram {
  id               String           @id @default(uuid())
  title            String           @default("Send new Facebook post to Instagram")
  automation_id    String           @default("facebook-post-to-instagram")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  facebook         Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId       String?
  facebook_tested  Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([instagramId])
}

model AutomationFacebookPostToLinkedin {
  id              String           @id @default(uuid())
  title           String           @default("Send new Facebook post to Linkedin")
  automation_id   String           @default("facebook-post-to-linkedin")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([linkedinId])
}

model AutomationFacebookReelToInstagramReel {
  id               String           @id @default(uuid())
  title            String           @default("Send new Facebook reel to Instagram reel")
  automation_id    String           @default("facebook-reel-to-instagram-reel")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  facebook         Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId       String?
  facebook_tested  Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([instagramId])
}

model AutomationFacebookReelToYoutubeShort {
  id              String           @id @default(uuid())
  title           String           @default("Send new Facebook reel to Youtube short")
  automation_id   String           @default("facebook-reel-to-youtube-short")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  youtube         Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String?
  youtube_tested  Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([facebookId])
  @@index([automationId])
  @@index([youtubeId])
}

model AutomationFacebookReelToTiktok {
  id              String           @id @default(uuid())
  title           String           @default("Send new Facebook reel to TikTok")
  automation_id   String           @default("facebook-reel-to-tiktok")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  tiktok          Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId        String?
  tiktok_tested   Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([tiktokId])
}

model AutomationFacebookPostToTwitter {
  id              String           @id @default(uuid())
  title           String           @default("Send new Facebook post to Twitter")
  automation_id   String           @default("facebook-post-to-twitter")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  twitter         Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId       String?
  twitter_tested  Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([twitterId])
}

model AutomationInstagramToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Instagram post to Slack")
  automation_id       String           @default("instagram-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  instagram           Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId         String?
  instagram_tested    Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([slackId])
}

model AutomationInstagramToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Instagram post to Discord")
  automation_id       String           @default("instagram-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  instagram           Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId         String?
  instagram_tested    Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([discordId])
}

model AutomationInstagramToTwitter {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram post to Twitter")
  automation_id    String           @default("instagram-to-twitter")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  twitter          Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId        String?
  twitter_tested   Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([twitterId])
}

model AutomationInstagramToFacebook {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram post to Facebook")
  automation_id    String           @default("instagram-to-facebook")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  facebook         Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId       String?
  facebook_tested  Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([facebookId])
  @@index([instagramId])
}

model AutomationInstagramToLinkedin {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram post to Linkedin")
  automation_id    String           @default("instagram-to-linkedin")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  linkedin         Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId       String?
  linkedin_tested  Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([linkedinId])
}

model AutomationInstagramReelToTiktok {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram reel to TikTok")
  automation_id    String           @default("instagram-reel-to-tiktok")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  tiktok           Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId         String?
  tiktok_tested    Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([tiktokId])
}

model AutomationInstagramReelToFacebookReel {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram reel to Facebook reel")
  automation_id    String           @default("instagram-reel-to-facebook-reel")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  facebook         Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId       String?
  facebook_tested  Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([facebookId])
}

model AutomationInstagramReelToYoutubeShort {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram reel to Youtube short")
  automation_id    String           @default("instagram-reel-to-youtube-short")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  youtube          Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId        String?
  youtube_tested   Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([instagramId])
  @@index([youtubeId])
}

model AutomationLinkedinToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Linkedin post to Slack")
  automation_id       String           @default("linkedin-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  linkedin            Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId          String?
  linkedin_tested     Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([slackId])
}

model AutomationLinkedinToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Linkedin post to Discord")
  automation_id       String           @default("linkedin-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  linkedin            Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId          String?
  linkedin_tested     Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([discordId])
}

model AutomationLinkedinToTiktok {
  id              String           @id @default(uuid())
  title           String           @default("Send new Linkedin post to TikTok")
  automation_id   String           @default("linkedin-to-tiktok")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  tiktok          Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId        String?
  tiktok_tested   Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([tiktokId])
}

model AutomationLinkedinToInstagram {
  id               String           @id @default(uuid())
  title            String           @default("Send new Linkedin post to Instagram")
  automation_id    String           @default("linkedin-to-instagram")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  linkedin         Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId       String?
  linkedin_tested  Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([instagramId])
}

model AutomationLinkedinToInstagramReel {
  id               String           @id @default(uuid())
  title            String           @default("Send new Linkedin post to Instagram reel")
  automation_id    String           @default("linkedin-to-instagram-reel")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  linkedin         Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId       String?
  linkedin_tested  Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([instagramId])
}

model AutomationLinkedinToYoutubeShort {
  id              String           @id @default(uuid())
  title           String           @default("Send new Linkedin post to Youtube short")
  automation_id   String           @default("linkedin-to-youtube-short")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  youtube         Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String?
  youtube_tested  Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([youtubeId])
  @@index([linkedinId])
  @@index([automationId])
}

model AutomationLinkedinToFacebook {
  id              String           @id @default(uuid())
  title           String           @default("Send new Linkedin post to Facebook")
  automation_id   String           @default("linkedin-to-facebook")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([facebookId])
}

model AutomationLinkedinToTwitter {
  id              String           @id @default(uuid())
  title           String           @default("Send new Linkedin post to Twitter")
  automation_id   String           @default("linkedin-to-twitter")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  twitter         Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId       String?
  twitter_tested  Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([linkedinId])
  @@index([twitterId])
}

model AutomationTiktokToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new TikTok video to Slack")
  automation_id       String           @default("tiktok-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  tiktok              Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId            String?
  tiktok_tested       Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([slackId])
  @@index([tiktokId])
  @@index([automationId])
}

model AutomationTiktokToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new TikTok video to Discord")
  automation_id       String           @default("tiktok-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  tiktok              Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId            String?
  tiktok_tested       Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([discordId])
  @@index([tiktokId])
}

model AutomationTiktokToYoutubeShorts {
  id             String           @id @default(uuid())
  title          String           @default("Send new TikTok video to Youtube short")
  automation_id  String           @default("tiktok-to-youtube-shorts")
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  active         Boolean          @default(false)
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  tiktok         Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId       String?
  tiktok_tested  Boolean          @default(false)
  youtube        Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId      String?
  youtube_tested Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([automationId])
  @@index([tiktokId])
  @@index([youtubeId])
}

model AutomationTiktokToTwitter {
  id             String           @id @default(uuid())
  title          String           @default("Send new TikTok video to Twitter")
  automation_id  String           @default("tiktok-to-twitter")
  active         Boolean          @default(false)
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  tiktok         Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId       String?
  tiktok_tested  Boolean          @default(false)
  twitter        Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String?
  twitter_tested Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([automationId])
  @@index([tiktokId])
  @@index([twitterId])
}

model AutomationTiktokToLinkedin {
  id              String           @id @default(uuid())
  title           String           @default("Send new TikTok video to Linkedin")
  automation_id   String           @default("tiktok-to-linkedin")
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  active          Boolean          @default(false)
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  tiktok          Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId        String?
  tiktok_tested   Boolean          @default(false)
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([tiktokId])
  @@index([linkedinId])
}

model AutomationTiktokToInstagramReel {
  id               String           @id @default(uuid())
  title            String           @default("Send new TikTok video to Instagram reel")
  automation_id    String           @default("tiktok-to-instagram-reel")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  tiktok           Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId         String?
  tiktok_tested    Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([tiktokId])
  @@index([instagramId])
}

model AutomationTiktokToFacebookReel {
  id              String           @id @default(uuid())
  title           String           @default("Send new Tiktok Video to Facebook reel")
  automation_id   String           @default("tiktok-to-facebook-reel")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  tiktok          Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId        String?
  tiktok_tested   Boolean          @default(false)
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([tiktokId])
  @@index([facebookId])
}

model AutomationTwitterToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Twitter tweet to Slack")
  automation_id       String           @default("twitter-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  twitter             Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId           String?
  twitter_tested      Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([twitterId])
  @@index([slackId])
}

model AutomationTwitterToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Twitter tweet to Discord")
  automation_id       String           @default("twitter-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  twitter             Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId           String?
  twitter_tested      Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([discordId])
  @@index([twitterId])
  @@index([automationId])
}

model AutomationTwitterToLinkedin {
  id              String          @id @default(uuid())
  title           String          @default("Send new Twitter tweet to Linkedin")
  automation_id   String          @default("twitter-to-linkedin")
  active          Boolean         @default(false)
  automation      Automation      @relation(fields: [automationId], references: [id], onDelete: Cascade)
  poll_time       Int             @default(5)
  created_at      DateTime        @default(now())
  runs            AutomationRun[]
  automationId    String
  twitter         Twitter?        @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId       String?
  twitter_tested  Boolean         @default(false)
  linkedin        Linkedin?       @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean         @default(false)

  logs AutomationLogs[]

  @@index([automationId])
  @@index([twitterId])
  @@index([linkedinId])
}

model AutomationTwitterToInstagram {
  id               String           @id @default(uuid())
  title            String           @default("Send new Twitter tweet to Instagram")
  automation_id    String           @default("twitter-to-instagram")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  twitter          Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId        String?
  twitter_tested   Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([twitterId])
  @@index([instagramId])
}

model AutomationTwitterToInstagramReel {
  id               String           @id @default(uuid())
  title            String           @default("Send new Twitter tweet to Instagram reel")
  automation_id    String           @default("twitter-to-instagram-reel")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  twitter          Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId        String?
  twitter_tested   Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([twitterId])
  @@index([instagramId])
}

model AutomationTwitterToTiktok {
  id             String           @id @default(uuid())
  title          String           @default("Send new Twitter tweet to TikTok")
  automation_id  String           @default("twitter-to-tiktok")
  active         Boolean          @default(false)
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  twitter        Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String?
  twitter_tested Boolean          @default(false)
  tiktok         Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId       String?
  tiktok_tested  Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([tiktokId])
  @@index([twitterId])
  @@index([automationId])
}

model AutomationTwitterToYoutubeShorts {
  id             String           @id @default(uuid())
  title          String           @default("Send new Twitter tweet to Youtube short")
  automation_id  String           @default("twitter-to-youtube-shorts")
  active         Boolean          @default(false)
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  twitter        Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String?
  twitter_tested Boolean          @default(false)
  youtube        Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId      String?
  youtube_tested Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([automationId])
  @@index([twitterId])
  @@index([youtubeId])
}

model AutomationTwitterToFacebook {
  id              String           @id @default(uuid())
  title           String           @default("Send new Twitter tweet to Facebook")
  automation_id   String           @default("twitter-to-facebook")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  twitter         Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId       String?
  twitter_tested  Boolean          @default(false)
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([twitterId])
  @@index([facebookId])
}

model AutomationYoutubeVideoToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Youtube video to Slack")
  automation_id       String           @default("youtube-video-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  youtube             Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId           String?
  youtube_tested      Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([slackId])
}

model AutomationYoutubeShortToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Youtube short to Slack")
  automation_id       String           @default("youtube-short-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  youtube             Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId           String?
  youtube_tested      Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([slackId])
}

model AutomationYoutubeVideoToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Youtube video to Discord")
  automation_id       String           @default("youtube-video-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  youtube             Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId           String?
  youtube_tested      Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([discordId])
}

model AutomationYoutubeShortToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Youtube video to Discord")
  automation_id       String           @default("youtube-short-to-discord")
  active              Boolean          @default(false)
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  youtube             Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId           String?
  youtube_tested      Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([discordId])
}

model AutomationYoutubeShortToTiktok {
  id             String           @id @default(uuid())
  title          String           @default("Send new Youtube short to TikTok")
  automation_id  String           @default("youtube-short-to-tiktok")
  active         Boolean          @default(false)
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  youtube        Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId      String?
  youtube_tested Boolean          @default(false)
  tiktok         Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId       String?
  tiktok_tested  Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([tiktokId])
}

model AutomationYoutubeShortToInstagramReel {
  id               String           @id @default(uuid())
  title            String           @default("Send new Youtube short to Instagram reel")
  automation_id    String           @default("youtube-short-to-instagram-reel")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  youtube          Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId        String?
  youtube_tested   Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([instagramId])
}

model AutomationYoutubeShortToTwitter {
  id             String           @id @default(uuid())
  title          String           @default("Send new Youtube short to Twitter")
  automation_id  String           @default("youtube-short-to-twitter")
  active         Boolean          @default(false)
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  youtube        Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId      String?
  youtube_tested Boolean          @default(false)
  twitter        Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String?
  twitter_tested Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([twitterId])
}

model AutomationYoutubeShortToLinkedin {
  id              String           @id @default(uuid())
  title           String           @default("Send new Youtube short to Linkedin")
  automation_id   String           @default("youtube-short-to-linkedin")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  youtube         Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String?
  youtube_tested  Boolean          @default(false)
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([youtubeId])
  @@index([linkedinId])
}

model AutomationYoutubeShortToFacebookReel {
  id              String           @id @default(uuid())
  title           String           @default("Send new Youtube short to Facebok reel")
  automation_id   String           @default("youtube-short-to-facebook-reel")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  youtube         Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String?
  youtube_tested  Boolean          @default(false)
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([facebookId])
  @@index([youtubeId])
  @@index([automationId])
}

model AutomationPinterestTwitterPost {
  id               String           @id @default(uuid())
  title            String           @default("Send new Twitter tweet to Pinterest.")
  automation_id    String           @default("pinterest-twitter-post")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  pinterest        Pinterest?       @relation(fields: [pinterestId], references: [id], onDelete: Cascade)
  pinterestId      String?
  pinterest_tested Boolean          @default(false)
  twitter          Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId        String?
  twitter_tested   Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([pinterestId])
  @@index([twitterId])
}

model AutomationPinterestYoutubeShort {
  id               String           @id @default(uuid())
  title            String           @default("Send new Youtube short to Pinterest.")
  automation_id    String           @default("pinterest-youtube-short")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  pinterest        Pinterest?       @relation(fields: [pinterestId], references: [id], onDelete: Cascade)
  pinterestId      String?
  pinterest_tested Boolean          @default(false)
  youtube          Youtube?         @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId        String?
  youtube_tested   Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([pinterestId])
  @@index([youtubeId])
}

model AutomationPinterestLinkedinPost {
  id               String           @id @default(uuid())
  title            String           @default("Send new Linkedin post to Pinterest.")
  automation_id    String           @default("pinterest-linkedin-post")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  pinterest        Pinterest?       @relation(fields: [pinterestId], references: [id], onDelete: Cascade)
  pinterestId      String?
  pinterest_tested Boolean          @default(false)
  linkedin         Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId       String?
  linkedin_tested  Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([pinterestId])
  @@index([linkedinId])
}

model AutomationPinterestTiktokPost {
  id               String           @id @default(uuid())
  title            String           @default("Send new Tiktok post to Pinterest.")
  automation_id    String           @default("pinterest-tiktok-post")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  pinterest        Pinterest?       @relation(fields: [pinterestId], references: [id], onDelete: Cascade)
  pinterestId      String?
  pinterest_tested Boolean          @default(false)
  tiktok           Tiktok?          @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId         String?
  tiktok_tested    Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([pinterestId])
  @@index([tiktokId])
}

model AutomationPinterestFacebookPost {
  id               String           @id @default(uuid())
  title            String           @default("Send new Facebook post to Pinterest.")
  automation_id    String           @default("pinterest-facebook-post")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  pinterest        Pinterest?       @relation(fields: [pinterestId], references: [id], onDelete: Cascade)
  pinterestId      String?
  pinterest_tested Boolean          @default(false)
  facebook         Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId       String?
  facebook_tested  Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([pinterestId])
  @@index([facebookId])
}

model AutomationPinterestInstagramPost {
  id               String           @id @default(uuid())
  title            String           @default("Send new Instagram post to Pinterest.")
  automation_id    String           @default("pinterest-instagram-post")
  active           Boolean          @default(false)
  poll_time        Int              @default(5)
  created_at       DateTime         @default(now())
  runs             AutomationRun[]
  automation       Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId     String
  pinterest        Pinterest?       @relation(fields: [pinterestId], references: [id], onDelete: Cascade)
  pinterestId      String?
  pinterest_tested Boolean          @default(false)
  instagram        Instagram?       @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId      String?
  instagram_tested Boolean          @default(false)
  logs             AutomationLogs[]

  @@index([automationId])
  @@index([pinterestId])
  @@index([instagramId])
}

model AutomationTwitchStreamToSlack {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Twitch livestream to Slack.")
  automation_id       String           @default("twitch-stream-to-slack")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  slack_channel_id    String?
  slack_message       String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  twitch              Twitch?          @relation(fields: [twitchId], references: [id], onDelete: Cascade)
  twitchId            String?
  twitch_tested       Boolean          @default(false)
  slack               Slack?           @relation(fields: [slackId], references: [id], onDelete: Cascade)
  slackId             String?
  slack_tested        Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([twitchId])
  @@index([slackId])
}

model AutomationTwitchStreamToDiscord {
  id                  String           @id @default(uuid())
  title               String           @default("Send new Twitch livestream to Discord.")
  automation_id       String           @default("twitch-stream-to-discord")
  active              Boolean          @default(false)
  poll_time           Int              @default(5)
  created_at          DateTime         @default(now())
  include_actual_post Boolean          @default(true)
  discord_guild_id    String?
  discord_message     String?
  discord_bot_name    String?
  webhooks_url        String?
  runs                AutomationRun[]
  automation          Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId        String
  twitch              Twitch?          @relation(fields: [twitchId], references: [id], onDelete: Cascade)
  twitchId            String?
  twitch_tested       Boolean          @default(false)
  discord             Discord?         @relation(fields: [discordId], references: [id], onDelete: Cascade)
  discordId           String?
  discord_tested      Boolean          @default(false)
  logs                AutomationLogs[]

  @@index([automationId])
  @@index([twitchId])
  @@index([discordId])
}

model AutomationTwitchStreamToTwitter {
  id             String           @id @default(uuid())
  title          String           @default("New Twitter tweet when a new Twitch livestream starts.")
  automation_id  String           @default("twitch-stream-to-twitter")
  active         Boolean          @default(false)
  poll_time      Int              @default(5)
  created_at     DateTime         @default(now())
  runs           AutomationRun[]
  automation     Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId   String
  twitch         Twitch?          @relation(fields: [twitchId], references: [id], onDelete: Cascade)
  twitchId       String?
  twitch_tested  Boolean          @default(false)
  twitter        Twitter?         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String?
  twitter_tested Boolean          @default(false)
  logs           AutomationLogs[]

  @@index([automationId])
  @@index([twitchId])
  @@index([twitterId])
}

model AutomationTwitchStreamToLinkedin {
  id              String           @id @default(uuid())
  title           String           @default("New Linkedin post when a new Twitch livestream starts.")
  automation_id   String           @default("twitch-stream-to-linkedin")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  twitch          Twitch?          @relation(fields: [twitchId], references: [id], onDelete: Cascade)
  twitchId        String?
  twitch_tested   Boolean          @default(false)
  linkedin        Linkedin?        @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId      String?
  linkedin_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([twitchId])
  @@index([linkedinId])
}

model AutomationTwitchStreamToFacebook {
  id              String           @id @default(uuid())
  title           String           @default("New Facebook post when a new Twitch livestream starts.")
  automation_id   String           @default("twitch-stream-to-facebook")
  active          Boolean          @default(false)
  poll_time       Int              @default(5)
  created_at      DateTime         @default(now())
  runs            AutomationRun[]
  automation      Automation       @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId    String
  twitch          Twitch?          @relation(fields: [twitchId], references: [id], onDelete: Cascade)
  twitchId        String?
  twitch_tested   Boolean          @default(false)
  facebook        Facebook?        @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId      String?
  facebook_tested Boolean          @default(false)
  logs            AutomationLogs[]

  @@index([automationId])
  @@index([twitchId])
  @@index([facebookId])
}

model AutomationsUsage {
  id              String @id @default(uuid())
  automation_runs Int    @default(0)
  monthUsageId    String @unique
}

model AvatarImage {
  id     String @id @default(uuid())
  format String
}

model CaptionBlock {
  id String @id @default(uuid())
}

model Captions {
  id String @id @default(uuid())
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String?
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([fileId])
  @@index([userId])
}

model Composition {
  id               String            @id @default(uuid())
  name             String?
  background_color String            @default("#000000")
  canvasSelect     String            @default("Horizontal Video")
  canvasSize       String            @default("16:9")
  folder           Folder            @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId         String
  creator          User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        String
  ContentTimeline  ContentTimeline[]

  @@index([creatorId])
  @@index([folderId])
}

model ConfirmEmail {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  email      String
}

model Contact {
  id           String  @id @default(uuid())
  first_name   String
  last_name    String
  email        String
  company_name String?
  message      String
}

model ContactSales {
  id           String @id @default(uuid())
  first_name   String
  last_name    String
  email        String
  phone_number String
  company_name String
  company_size String
}

model ContentTimeline {
  id            String       @id @default(uuid())
  media_type    String
  composition   Composition  @relation(fields: [compositionId], references: [id], onDelete: Cascade)
  compositionId String
  text_blocks   TextBlock[]
  image_blocks  ImageBlock[]
  audio_blocks  AudioBlock[]
  VideoBlock    VideoBlock[]

  @@index([compositionId])
}

model Discord {
  id                               String                             @id @default(uuid())
  access_token                     String
  refresh_token                    String
  expires_in                       String
  guild_id                         String
  workspace                        Workspace                          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                      String                             @unique
  AutomationDiscordTwitterPost     AutomationDiscordTwitterPost[]
  AutomationDiscordInstagramPost   AutomationDiscordInstagramPost[]
  AutomationDiscordYoutubePost     AutomationDiscordYoutubePost[]
  AutomationDiscordFacebookPost    AutomationDiscordFacebookPost[]
  AutomationDiscordTiktokPost      AutomationDiscordTiktokPost[]
  AutomationDiscordLinkedinPost    AutomationDiscordLinkedinPost[]
  AutomationDiscordWeeklyAnalytics AutomationDiscordWeeklyAnalytics[]
  AutomationDiscordDailyAnalytics  AutomationDiscordDailyAnalytics[]
  AutomationFacebookPostToDiscord  AutomationFacebookPostToDiscord[]
  AutomationInstagramToDiscord     AutomationInstagramToDiscord[]
  AutomationLinkedinToDiscord      AutomationLinkedinToDiscord[]
  AutomationTiktokToDiscord        AutomationTiktokToDiscord[]
  AutomationTwitterToDiscord       AutomationTwitterToDiscord[]
  AutomationYoutubeVideoToDiscord  AutomationYoutubeVideoToDiscord[]
  AutomationYoutubeShortToDiscord  AutomationYoutubeShortToDiscord[]
  AutomationTwitchStreamToDiscord  AutomationTwitchStreamToDiscord[]
}

model EngagementRemoveTweet {
  id        String  @id @default(uuid())
  tweetId   String
  twitter   Twitter @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model DraftGiveaway {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  tweeted    Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText()
  twitter    Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId  String

  @@index([twitterId])
}

model DraftPoll {
  id              String           @id @default(uuid())
  created_at      DateTime         @default(now())
  tweeted         Boolean          @default(false)
  scheduled       Boolean          @default(false)
  text            String?          @db.LongText()
  duration_metric String           @default("Hours")
  duration        Int              @default(0)
  fields          DraftPollField[]

  // Poll Options
  remove_url_preview Boolean @default(false)

  auto_retweet        Boolean @default(false)
  retweet_metric      String  @default("Likes")
  retweet_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  twitter   Twitter @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model DraftPollField {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  index       Int
  text        String?
  draft_poll  DraftPoll @relation(fields: [draftPollId], references: [id], onDelete: Cascade)
  draftPollId String

  @@index([draftPollId])
}

model DraftThread {
  id           String             @id @default(uuid())
  created_at   DateTime           @default(now())
  tweeted      Boolean            @default(false)
  scheduled    Boolean            @default(false)
  twitter      Twitter            @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId    String
  draft_tweets DraftThreadTweet[]

  // Thread Options
  remove_url_preview Boolean @default(false)

  delay_tweets        Boolean @default(false)
  delay_tweets_metric String  @default("Minutes")
  delay_tweets_input  Int     @default(0)

  auto_retweet        Boolean @default(false)
  retweet_metric      String  @default("Likes")
  retweet_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  @@index([twitterId])
}

model DraftThreadTweet {
  id            String      @id @default(uuid())
  created_at    DateTime    @default(now())
  index         Int
  text          String?     @db.LongText()
  draft_thread  DraftThread @relation(fields: [draftThreadId], references: [id], onDelete: Cascade)
  draftThreadId String
  file          File?       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String?

  @@index([draftThreadId])
  @@index([fileId])
}

model TwitterAutoDmUsers {
  id                      String                 @id @default(uuid())
  userId                  String
  draftTweet              DraftTweet?            @relation(fields: [draftTweetId], references: [id])
  draftTweetId            String?
  twitterScheduledTweet   TwitterScheduledTweet? @relation(fields: [twitterScheduledTweetId], references: [id])
  twitterScheduledTweetId String?

  @@index([draftTweetId])
  @@index([twitterScheduledTweetId])
}

model DraftTweet {
  id                 String    @id @default(uuid())
  created_at         DateTime  @default(now())
  posted_at          DateTime?
  tweeted            Boolean   @default(false)
  scheduled          Boolean   @default(false)
  text               String?   @db.LongText
  // Tweet Option
  remove_url_preview Boolean   @default(false)

  auto_retweet        Boolean @default(false)
  retweet_metric      String  @default("Likes")
  retweet_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  auto_dm            Boolean @default(false)
  dm_like_checked    Boolean @default(false)
  dm_retweet_checked Boolean @default(false)
  dm_reply_checked   Boolean @default(false)
  dm_message         String  @default("")

  auto_dm_users TwitterAutoDmUsers[]

  twitter       Twitter         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId     String
  file          File?           @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String?
  TwitterAutoDm TwitterAutoDm[]

  @@index([fileId])
  @@index([twitterId])
}

model EditingTranscriptionUsage {
  id                    String @id @default(uuid())
  transcription_minutes Int    @default(0)
  monthUsageId          String @unique
}

model FacebookPage {
  id                         String                       @id @default(uuid())
  stared                     Boolean                      @default(false)
  name                       String
  access_token               String                       @db.LongText
  page_id                    String
  facebook                   Facebook?                    @relation(fields: [facebookId], references: [id], onDelete: Cascade)
  facebookId                 String?
  texts                      FacebookDraftText[]
  images                     FacebookDraftImage[]
  videos                     FacebookDraftVideo[]
  reels                      FacebookDraftReel[]
  slideshows                 FacebookDraftSlideshow[]
  followers                  FacebookFollower[]
  likes                      FacebookLike[]
  impressions                FacebookImpression[]
  views                      FacebookView[]
  engaged_users              FacebookEngagedUser[]
  website_clicks             FacebookWebsiteClicks[]
  engagements                FacebookEngagement[]
  positive_reactions         FacebookPositiveReaction[]
  negative_reactions         FacebookNegativeReaction[]
  fans                       FacebookFans[]
  total_video_views          FacebookTotalVideoView[]
  unique_video_views         FacebookUniqueVideoView[]
  video_views_30_seconds     Facebook30SecondVideoView[]
  video_views_10_seconds     Facebook10SecondVideoView[]
  total_view_time            FacebookTotalViewTime[]
  average_view_time          FacebookAverageViewTime[]
  FacebookContentPosted      FacebookContentPosted[]
  FacebookScheduledText      FacebookScheduledText[]
  FacebookScheduledImage     FacebookScheduledImage[]
  FacebookScheduledVideo     FacebookScheduledVideo[]
  FacebookScheduledReel      FacebookScheduledReel[]
  FacebookTextAutoRepost     FacebookTextAutoRepost[]
  FacebookAutoPlug           FacebookAutoPlug[]
  image_auto_repost          FacebookImageAutoRepost[]
  posting_schedule           FacebookMyPostingSchedule[]
  FacebookVideoAutoRepost    FacebookVideoAutoRepost[]
  FacebookReelAutoRepost     FacebookReelAutoRepost[]
  FacebookScheduledSlideshow FacebookScheduledSlideshow[]

  @@index([facebookId])
}

model FacebookFollower {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  followers      Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
  @@index([facebookPageId, created_at])
}

model FacebookLike {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  likes          Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookContentPosted {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  description    String?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
  @@index([facebookPageId, created_at])
}

model FacebookImpression {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  impressions    Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
  @@index([facebookPageId, created_at])
}

model FacebookView {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  views          Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookEngagedUser {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  engaged_users  Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookWebsiteClicks {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  website_clicks Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookEngagement {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  engagements    Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookPositiveReaction {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  reactions      Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookNegativeReaction {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  reactions      Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookFans {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  fans           Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookTotalVideoView {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  views          Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookUniqueVideoView {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  views          Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model Facebook30SecondVideoView {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  views          Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model Facebook10SecondVideoView {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  views          Int
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookTotalViewTime {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  seconds        BigInt
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookAverageViewTime {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  seconds        BigInt
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model Facebook {
  id                                    String                                  @id @default(uuid())
  facebook_id                           String?
  access_token                          String                                  @db.LongText
  access_token_expiry                   String
  long_access_token                     String?                                 @db.LongText
  long_access_token_expiry              String?
  pages                                 FacebookPage[]
  scopes                                String
  workspace                             Workspace                               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                           String                                  @unique
  AutomationDiscordFacebookPost         AutomationDiscordFacebookPost[]
  AutomationSlackFacebookPost           AutomationSlackFacebookPost[]
  AutomationFacebookPostToSlack         AutomationFacebookPostToSlack[]
  AutomationFacebookPostToDiscord       AutomationFacebookPostToDiscord[]
  AutomationFacebookPostToInstagram     AutomationFacebookPostToInstagram[]
  AutomationFacebookPostToLinkedin      AutomationFacebookPostToLinkedin[]
  AutomationFacebookReelToTiktok        AutomationFacebookReelToTiktok[]
  AutomationFacebookReelToYoutubeShort  AutomationFacebookReelToYoutubeShort[]
  AutomationFacebookReelToInstagramReel AutomationFacebookReelToInstagramReel[]
  AutomationInstagramToFacebook         AutomationInstagramToFacebook[]
  AutomationInstagramReelToFacebookReel AutomationInstagramReelToFacebookReel[]
  AutomationLinkedinToFacebook          AutomationLinkedinToFacebook[]
  AutomationTiktokToFacebookReel        AutomationTiktokToFacebookReel[]
  AutomationTwitterToFacebook           AutomationTwitterToFacebook[]
  AutomationYoutubeShortToFacebookReel  AutomationYoutubeShortToFacebookReel[]
  AutomationFacebookPostToTwitter       AutomationFacebookPostToTwitter[]
  AutomationPinterestFacebookPost       AutomationPinterestFacebookPost[]
  AutomationTwitchStreamToFacebook      AutomationTwitchStreamToFacebook[]
}

model FacebookMyPostingSchedule {
  id             String       @id @default(uuid())
  time           String
  timezone       Int
  mon            Boolean      @default(true)
  tue            Boolean      @default(true)
  wed            Boolean      @default(true)
  thu            Boolean      @default(true)
  fri            Boolean      @default(true)
  sat            Boolean      @default(false)
  sun            Boolean      @default(false)
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookTextAutoRepost {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  active         Boolean      @default(true)
  text           String
  post_id        String
  metric         String       @default("Likes")
  metric_value   Int
  action_time    DateTime?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookImageAutoRepost {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  active         Boolean      @default(true)
  text           String
  post_id        String
  metric         String       @default("Likes")
  metric_value   Int
  action_time    DateTime?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String

  @@index([facebookPageId])
  @@index([fileId])
}

model FacebookVideoAutoRepost {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  active         Boolean      @default(true)
  text           String
  post_id        String
  metric         String       @default("Likes")
  metric_value   Int
  action_time    DateTime?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String

  @@index([facebookPageId])
  @@index([fileId])
}

model FacebookReelAutoRepost {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  active         Boolean      @default(true)
  text           String
  post_id        String
  metric         String       @default("Likes")
  metric_value   Int
  action_time    DateTime?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String
  file           File         @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String

  @@index([facebookPageId])
  @@index([fileId])
}

model FacebookAutoPlug {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  active         Boolean      @default(true)
  post_id        String
  metric         String       @default("Likes")
  metric_value   Int
  action_time    DateTime?
  message        String       @db.LongText
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookScheduledText {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookScheduledImage {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file           File?        @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([fileId])
  @@index([facebookPageId])
}

model FacebookScheduledVideo {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file           File?        @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([fileId])
  @@index([facebookPageId])
}

model FacebookScheduledReel {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file           File?        @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([fileId])
  @@index([facebookPageId])
}

model FacebookScheduledSlideshowImage {
  id                           String                     @id @default(uuid())
  created_at                   DateTime                   @default(now())
  index                        Int
  image                        File                       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId                      String
  facebookScheduledSlideshow   FacebookScheduledSlideshow @relation(fields: [facebookScheduledSlideshowId], references: [id], onDelete: Cascade)
  facebookScheduledSlideshowId String

  @@index([facebookScheduledSlideshowId])
  @@index([imageId])
}

model FacebookScheduledSlideshow {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  facebookPage   FacebookPage                      @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String
  images         FacebookScheduledSlideshowImage[]

  @@index([facebookPageId])
}

model FacebookDraftText {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model FacebookDraftImage {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file           File?        @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([fileId])
  @@index([facebookPageId])
}

model FacebookDraftVideo {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file           File?        @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String?
  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([fileId])
  @@index([facebookPageId])
}

model FacebookDraftReel {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String?

  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([fileId])
  @@index([facebookPageId])
}

model FacebookSlideshowImage {
  id                       String                  @id @default(uuid())
  created_at               DateTime                @default(now())
  index                    Int
  image                    File                    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId                  String
  facebookDraftSlideshow   FacebookDraftSlideshow? @relation(fields: [facebookDraftSlideshowId], references: [id], onDelete: Cascade)
  facebookDraftSlideshowId String?

  @@index([imageId])
  @@index([facebookDraftSlideshowId])
}

model FacebookDraftSlideshow {
  id         String                   @id @default(uuid())
  created_at DateTime                 @default(now())
  posted     Boolean                  @default(false)
  scheduled  Boolean                  @default(false)
  text       String?                  @db.LongText
  images     FacebookSlideshowImage[]

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  facebookPage   FacebookPage @relation(fields: [facebookPageId], references: [id], onDelete: Cascade)
  facebookPageId String

  @@index([facebookPageId])
}

model Feedback {
  id      String  @id @default(uuid())
  userId  String?
  message String?
}

model FifteenRuns {
  id String @id @default(uuid())
}

model File {
  id                                String                             @id @default(uuid())
  bucket                            String
  description                       String?
  filename                          String
  thumbnail                         String?
  url                               String
  uploadDate                        DateTime                           @default(now())
  size                              String
  format                            String
  transcription                     String?                            @db.LongText
  private                           Boolean                            @default(false)
  folder                            Folder                             @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId                          String
  uploader                          User?                              @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId                        String?
  view                              View?
  text_blocks                       TextBlock[]
  image_blocks                      ImageBlock[]
  comments                          Comment[]
  audio_blocks                      AudioBlock[]
  DraftTweet                        DraftTweet[]
  VideoBlock                        VideoBlock[]
  YoutubeVideoDraft                 YoutubeVideoDraft[]
  YoutubeShortsDraft                YoutubeShortsDraft[]
  TiktokScheduledContent            TiktokScheduledContent[]
  DraftThreadTweet                  DraftThreadTweet[]
  TwitterScheduledTweets            TwitterScheduledTweet[]
  TwitterScheduledThreadTweet       TwitterScheduledThreadTweet[]
  LinkedinDraftImage                LinkedinDraftImage[]
  LinkedinDraftVideo                LinkedinDraftVideo[]
  LinkedinMultiimageImage           LinkedinMultiimageImage[]
  FacebookDraftImage                FacebookDraftImage[]
  FacebookDraftVideo                FacebookDraftVideo[]
  FacebookDraftReel                 FacebookDraftReel[]
  FacebookSlideshowImage            FacebookSlideshowImage[]
  InstagramDraftImage               InstagramDraftImage[]
  InstagramDraftVideo               InstagramDraftVideo[]
  InstagramDraftReel                InstagramDraftReel[]
  InstagramDraftCarouselMedia       InstagramDraftCarouselMedia[]
  FacebookScheduledImage            FacebookScheduledImage[]
  FacebookScheduledVideo            FacebookScheduledVideo[]
  FacebookScheduledReel             FacebookScheduledReel[]
  facebook_image_auto_repost        FacebookImageAutoRepost[]
  LinkedinScheduledImage            LinkedinScheduledImage[]
  LinkedinScheduledVideo            LinkedinScheduledVideo[]
  LinkedinScheduledMultiimageImage  LinkedinScheduledMultiimageImage[]
  YoutubeScheduledVideo             YoutubeScheduledVideo[]
  YoutubeScheduledShort             YoutubeScheduledShort[]
  FacebookVideoAutoRepost           FacebookVideoAutoRepost[]
  FacebookReelAutoRepost            FacebookReelAutoRepost[]
  FacebookScheduledSlideshowImage   FacebookScheduledSlideshowImage[]
  TiktokAutoRepost                  TiktokAutoRepost[]
  ScheduledThreadTweet              ScheduledThreadTweet[]
  YoutubeAutoRepost                 YoutubeAutoRepost[]
  InstagramScheduledImage           InstagramScheduledImage[]
  InstagramScheduledVideo           InstagramScheduledVideo[]
  InstagramScheduledReel            InstagramScheduledReel[]
  InstagramScheduledCarouselMedia   InstagramScheduledCarouselMedia[]
  InstagramImageAutoRepost          InstagramImageAutoRepost[]
  InstagramVideoAutoRepost          InstagramVideoAutoRepost[]
  InstagramReelAutoRepost           InstagramReelAutoRepost[]
  InstagramCarouselAutoRepostMetric InstagramCarouselAutoRepostMedia[]

  @@index([folderId])
  @@index([uploaderId])
}

model Folder {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  lastUpdated  DateTime      @default(now())
  name         String
  private      Boolean       @default(false)
  url          String
  workspace    Workspace?    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String?
  compositions Composition[]
  files        File[]

  @@index([workspaceId])
  @@index([id])
}

model ImageBlock {
  id                String          @id @default(uuid())
  file              File?           @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId            String?
  contentTimeline   ContentTimeline @relation(fields: [contentTimelineId], references: [id], onDelete: Cascade)
  contentTimelineId String

  @@index([contentTimelineId])
  @@index([fileId])
}

model Instagram {
  id                                    String                                  @id @default(uuid())
  user_id                               String?
  access_token                          String?                                 @db.LongText
  long_access_token                     String?                                 @db.LongText
  long_expiry_date                      DateTime?
  refresh_token                         String?                                 @db.LongText
  refresh_token_exipry                  DateTime?
  expires_in                            DateTime                                @default(now())
  workspace                             Workspace                               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                           String                                  @unique
  AutomationDiscordInstagramPost        AutomationDiscordInstagramPost[]
  AutomationSlackInstagramPost          AutomationSlackInstagramPost[]
  AutomationFacebookPostToInstagram     AutomationFacebookPostToInstagram[]
  AutomationFacebookReelToInstagramReel AutomationFacebookReelToInstagramReel[]
  AutomationInstagramToSlack            AutomationInstagramToSlack[]
  AutomationInstagramToDiscord          AutomationInstagramToDiscord[]
  AutomationInstagramToTwitter          AutomationInstagramToTwitter[]
  AutomationInstagramToFacebook         AutomationInstagramToFacebook[]
  AutomationInstagramToLinkedin         AutomationInstagramToLinkedin[]
  AutomationInstagramReelToTiktok       AutomationInstagramReelToTiktok[]
  AutomationInstagramReelToFacebookReel AutomationInstagramReelToFacebookReel[]
  AutomationInstagramReelToYoutubeShort AutomationInstagramReelToYoutubeShort[]
  AutomationLinkedinToInstagram         AutomationLinkedinToInstagram[]
  AutomationLinkedinToInstagramReel     AutomationLinkedinToInstagramReel[]
  AutomationTiktokToInstagramReel       AutomationTiktokToInstagramReel[]
  AutomationTwitterToInstagram          AutomationTwitterToInstagram[]
  AutomationTwitterToInstagramReel      AutomationTwitterToInstagramReel[]
  AutomationYoutubeShortToInstagramReel AutomationYoutubeShortToInstagramReel[]
  InstagramDraftImage                   InstagramDraftImage[]
  InstagramDraftVideo                   InstagramDraftVideo[]
  InstagramDraftCarousel                InstagramDraftCarousel[]
  InstagramDraftReel                    InstagramDraftReel[]
  InstagramFollower                     InstagramFollower[]
  InstagramImpression                   InstagramImpression[]
  InstagramReach                        InstagramReach[]
  InstagramWebsiteClick                 InstagramWebsiteClick[]
  InstagramProfileView                  InstagramProfileView[]
  InstagramTotalIneraction              InstagramTotalIneraction[]
  InstagramLike                         InstagramLike[]
  InstagramComment                      InstagramComment[]
  InstagramSaved                        InstagramSaved[]
  InstagramShares                       InstagramShares[]
  InstagramEngagement                   InstagramEngagement[]
  InstagramPost                         InstagramPost[]
  InstagramContentPosted                InstagramContentPosted[]
  InstagramScheduledImage               InstagramScheduledImage[]
  InstagramScheduledVideo               InstagramScheduledVideo[]
  InstagramScheduledReel                InstagramScheduledReel[]
  InstagramScheduledCarousel            InstagramScheduledCarousel[]
  InstagramMyPostingSchedule            InstagramMyPostingSchedule[]
  InstagramAutoPlug                     InstagramAutoPlug[]
  image_auto_repost                     InstagramImageAutoRepost[]
  InstagramVideoAutoRepost              InstagramVideoAutoRepost[]
  InstagramReelAutoRepost               InstagramReelAutoRepost[]
  InstagramCarouselAutoRepost           InstagramCarouselAutoRepost[]
  InstagramAccountPage                  InstagramAccountPage[]
  AutomationPinterestInstagramPost      AutomationPinterestInstagramPost[]
}

model InstagramAccountPage {
  id           String    @id @default(uuid())
  page_id      String
  access_token String    @db.LongText
  username     String?
  name         String?
  instagram    Instagram @relation(fields: [instagramId], references: [id])
  instagramId  String

  @@index([instagramId])
}

model InstagramImageAutoRepost {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  action_time  DateTime?
  metric       String
  metric_value Int
  message      String
  file         File      @relation(fields: [fileId], references: [id])
  instagram    Instagram @relation(fields: [instagramId], references: [id])
  instagramId  String
  fileId       String

  @@index([instagramId])
  @@index([fileId])
}

model InstagramVideoAutoRepost {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  action_time  DateTime?
  metric       String
  metric_value Int
  message      String
  file         File      @relation(fields: [fileId], references: [id])
  instagram    Instagram @relation(fields: [instagramId], references: [id])
  instagramId  String
  fileId       String

  @@index([instagramId])
  @@index([fileId])
}

model InstagramReelAutoRepost {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  action_time  DateTime?
  metric       String
  metric_value Int
  message      String
  file         File      @relation(fields: [fileId], references: [id])
  instagram    Instagram @relation(fields: [instagramId], references: [id])
  instagramId  String
  fileId       String

  @@index([instagramId])
  @@index([fileId])
}

model InstagramCarouselAutoRepostMedia {
  id                            String                      @id @default(uuid())
  created_at                    DateTime                    @default(now())
  index                         Int
  image                         File                        @relation(fields: [imageId], references: [id])
  imageId                       String
  instagramDraftCarousel        InstagramCarouselAutoRepost @relation(fields: [instagramCarouselAutoRepostId], references: [id])
  instagramCarouselAutoRepostId String

  @@index([imageId])
  @@index([instagramCarouselAutoRepostId])
}

model InstagramCarouselAutoRepost {
  id           String                             @id @default(uuid())
  created_at   DateTime                           @default(now())
  active       Boolean                            @default(true)
  action_time  DateTime?
  metric       String
  metric_value Int
  text         String?
  images       InstagramCarouselAutoRepostMedia[]
  instagram    Instagram                          @relation(fields: [instagramId], references: [id])
  instagramId  String

  @@index([instagramId])
}

model InstagramAutoPlug {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  action_time  DateTime?
  metric       String
  metric_value Int
  post_id      String
  message      String
  instagram    Instagram @relation(fields: [instagramId], references: [id])
  instagramId  String

  @@index([instagramId])
}

model InstagramMyPostingSchedule {
  id          String    @id @default(uuid())
  time        String
  timezone    Int
  mon         Boolean   @default(true)
  tue         Boolean   @default(true)
  wed         Boolean   @default(true)
  thu         Boolean   @default(true)
  fri         Boolean   @default(true)
  sat         Boolean   @default(false)
  sun         Boolean   @default(false)
  instagram   Instagram @relation(fields: [instagramId], references: [id])
  instagramId String

  @@index([instagramId])
}

model InstagramScheduledImage {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file        File?     @relation(fields: [fileId], references: [id])
  fileId      String?
  instagram   Instagram @relation(fields: [instagramId], references: [id])
  instagramId String

  @@index([fileId])
  @@index([instagramId])
}

model InstagramScheduledVideo {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([fileId])
  @@index([instagramId])
}

model InstagramScheduledCarouselMedia {
  id                           String                     @id @default(uuid())
  created_at                   DateTime                   @default(now())
  index                        Int
  image                        File                       @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId                      String
  instagramScheduledCarousel   InstagramScheduledCarousel @relation(fields: [instagramScheduledCarouselId], references: [id])
  instagramScheduledCarouselId String

  @@index([imageId])
  @@index([instagramScheduledCarouselId])
}

model InstagramScheduledCarousel {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  instagram   Instagram                         @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String
  images      InstagramScheduledCarouselMedia[]

  @@index([instagramId])
}

model InstagramScheduledReel {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([fileId])
  @@index([instagramId])
}

model InstagramContentPosted {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  description String?
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
  @@index([instagramId, created_at])
}

model InstagramFollower {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  followers   Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
  @@index([instagramId, created_at])
}

model InstagramImpression {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  impressions Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
  @@index([instagramId, created_at])
}

model InstagramReach {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  reach       Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramWebsiteClick {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  clicks      Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramProfileView {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  views       Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramTotalIneraction {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  interactions Int
  instagram    Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId  String

  @@index([instagramId])
}

model InstagramLike {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  likes       Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramComment {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  comments    Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramSaved {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  saved       Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramShares {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  shares      Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramEngagement {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  engagements Int
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramPost {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([instagramId])
}

model InstagramDraftImage {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([fileId])
  @@index([instagramId])
}

model InstagramDraftVideo {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([fileId])
  @@index([instagramId])
}

model InstagramDraftCarouselMedia {
  id                       String                 @id @default(uuid())
  created_at               DateTime               @default(now())
  index                    Int
  image                    File                   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId                  String
  instagramDraftCarousel   InstagramDraftCarousel @relation(fields: [instagramDraftCarouselId], references: [id], onDelete: Cascade)
  instagramDraftCarouselId String

  @@index([imageId])
  @@index([instagramDraftCarouselId])
}

model InstagramDraftCarousel {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  instagram   Instagram                     @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String
  images      InstagramDraftCarouselMedia[]

  @@index([instagramId])
}

model InstagramDraftReel {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String?  @db.LongText

  remove_url_preview Boolean @default(false)

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String?
  instagram   Instagram @relation(fields: [instagramId], references: [id], onDelete: Cascade)
  instagramId String

  @@index([fileId])
  @@index([instagramId])
}

model Linkedin {
  id                                String                              @id @default(uuid())
  user_id                           String?
  access_token                      String                              @db.LongText
  expires_in                        DateTime
  refresh_token                     String                              @db.LongText
  refresh_token_expires_in          DateTime
  scope                             String
  workspace                         Workspace                           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                       String                              @unique
  AutomationDiscordLinkedinPost     AutomationDiscordLinkedinPost[]
  AutomationSlackLinkedinPost       AutomationSlackLinkedinPost[]
  AutomationFacebookPostToLinkedin  AutomationFacebookPostToLinkedin[]
  AutomationInstagramToLinkedin     AutomationInstagramToLinkedin[]
  AutomationLinkedinToSlack         AutomationLinkedinToSlack[]
  AutomationLinkedinToDiscord       AutomationLinkedinToDiscord[]
  AutomationLinkedinToTiktok        AutomationLinkedinToTiktok[]
  AutomationLinkedinToInstagram     AutomationLinkedinToInstagram[]
  AutomationLinkedinToInstagramReel AutomationLinkedinToInstagramReel[]
  AutomationLinkedinToTwitter       AutomationLinkedinToTwitter[]
  AutomationLinkedinToFacebook      AutomationLinkedinToFacebook[]
  AutomationLinkedinToYoutubeShort  AutomationLinkedinToYoutubeShort[]
  AutomationTiktokToLinkedin        AutomationTiktokToLinkedin[]
  AutomationTwitterToLinkedin       AutomationTwitterToLinkedin[]
  AutomationYoutubeShortToLinkedin  AutomationYoutubeShortToLinkedin[]
  LinkedinDraftImage                LinkedinDraftImage[]
  LinkedinDraftText                 LinkedinDraftText[]
  LinkedinDraftVideo                LinkedinDraftVideo[]
  LinkedinDraftMultiimage           LinkedinDraftMultiimage[]
  LinkedinDraftPoll                 LinkedinDraftPoll[]
  LinkedinScheduledText             LinkedinScheduledText[]
  LinkedinScheduledImage            LinkedinScheduledImage[]
  LinkedinScheduledVideo            LinkedinScheduledVideo[]
  LinkedinScheduledMultiimage       LinkedinScheduledMultiimage[]
  posting_schedule                  LinkedinMyPostingSchedule[]
  auto_plug                         LinkedinAutoPlug[]
  auto_reshare                      LinkedinAutoReshare[]
  LinkedinScheduledPoll             LinkedinScheduledPoll[]
  LinkedinContentPosted             LinkedinContentPosted[]
  AutomationPinterestLinkedinPost   AutomationPinterestLinkedinPost[]
  AutomationTwitchStreamToLinkedin  AutomationTwitchStreamToLinkedin[]
}

model LinkedinContentPosted {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  type       String
  text       String?
  media_link String?  @db.LongText
  post_id    String?
  linkedin   Linkedin @relation(fields: [linkedinId], references: [id])
  linkedinId String

  @@index([linkedinId])
  @@index([linkedinId, created_at])
}

model LinkedinAutoReshare {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  post_id      String
  metric       String    @default("Hours")
  metric_value Int
  action_time  DateTime?
  linkedin     Linkedin  @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId   String

  @@index([linkedinId])
}

model LinkedinAutoPlug {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  post_id      String
  metric       String    @default("Hours")
  metric_value Int
  action_time  DateTime?
  message      String    @db.LongText
  linkedin     Linkedin  @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId   String

  @@index([linkedinId])
}

model LinkedinMyPostingSchedule {
  id         String   @id @default(uuid())
  time       String
  timezone   Int
  mon        Boolean  @default(true)
  tue        Boolean  @default(true)
  wed        Boolean  @default(true)
  thu        Boolean  @default(true)
  fri        Boolean  @default(true)
  sat        Boolean  @default(false)
  sun        Boolean  @default(false)
  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String

  @@index([linkedinId])
}

model LinkedinScheduledText {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String   @default("") @db.LongText

  remove_url_preview Boolean @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String

  @@index([linkedinId])
}

model LinkedinScheduledImage {
  id                 String   @id @default(uuid())
  created_at         DateTime @default(now())
  scheduled_time     DateTime
  text               String   @default("") @db.LongText
  // Post Options
  remove_url_preview Boolean  @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String
  image      File?    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId    String?

  @@index([linkedinId])
  @@index([imageId])
}

model LinkedinScheduledVideo {
  id                 String   @id @default(uuid())
  created_at         DateTime @default(now())
  scheduled_time     DateTime
  text               String   @default("") @db.LongText
  // Post Options
  remove_url_preview Boolean  @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String
  video      File?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String?

  @@index([linkedinId])
  @@index([videoId])
}

model LinkedinScheduledMultiimageImage {
  id                            String                       @id @default(uuid())
  created_at                    DateTime                     @default(now())
  index                         Int
  scheduled_multiimage          LinkedinScheduledMultiimage? @relation(fields: [linkedinScheduledMultiimageId], references: [id], onDelete: Cascade)
  linkedinScheduledMultiimageId String?
  image                         File                         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId                       String

  @@index([linkedinScheduledMultiimageId])
  @@index([imageId])
}

model LinkedinScheduledMultiimage {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String   @default("") @db.LongText

  // Post Options
  remove_url_preview Boolean                            @default(false)
  images             LinkedinScheduledMultiimageImage[]

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String

  @@index([linkedinId])
}

model LinkedinScheduledPollField {
  id                      String                @id @default(uuid())
  created_at              DateTime              @default(now())
  index                   Int
  text                    String?
  scheduled_poll          LinkedinScheduledPoll @relation(fields: [linkedinScheduledPollId], references: [id], onDelete: Cascade)
  linkedinScheduledPollId String

  @@index([linkedinScheduledPollId])
}

model LinkedinScheduledPoll {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String   @default("") @db.LongText
  duration       String?

  // Post Options
  remove_url_preview Boolean @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin                     @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String
  fields     LinkedinScheduledPollField[]

  @@index([linkedinId])
}

model LinkedinDraftText {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  posted     Boolean  @default(false)
  scheduled  Boolean  @default(false)
  text       String   @default("") @db.LongText

  remove_url_preview Boolean @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String

  @@index([linkedinId])
}

model LinkedinDraftImage {
  id                 String   @id @default(uuid())
  created_at         DateTime @default(now())
  posted             Boolean  @default(false)
  scheduled          Boolean  @default(false)
  text               String   @default("") @db.LongText
  // Post Options
  remove_url_preview Boolean  @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String
  image      File?    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId    String?

  @@index([linkedinId])
  @@index([imageId])
}

model LinkedinDraftVideo {
  id                 String   @id @default(uuid())
  created_at         DateTime @default(now())
  posted             Boolean  @default(false)
  scheduled          Boolean  @default(false)
  text               String   @default("") @db.LongText
  // Post Options
  remove_url_preview Boolean  @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String
  video      File?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String?

  @@index([linkedinId])
  @@index([videoId])
}

model LinkedinMultiimageImage {
  id                        String                   @id @default(uuid())
  created_at                DateTime                 @default(now())
  index                     Int
  image                     File                     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  LinkedinDraftMultiimage   LinkedinDraftMultiimage? @relation(fields: [linkedinDraftMultiimageId], references: [id], onDelete: Cascade)
  linkedinDraftMultiimageId String?
  imageId                   String

  @@index([imageId])
  @@index([linkedinDraftMultiimageId])
}

model LinkedinDraftMultiimage {
  id                 String                    @id @default(uuid())
  created_at         DateTime                  @default(now())
  posted             Boolean                   @default(false)
  scheduled          Boolean                   @default(false)
  text               String                    @default("") @db.LongText
  // Post Options
  remove_url_preview Boolean                   @default(false)
  images             LinkedinMultiimageImage[]

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String

  @@index([linkedinId])
}

model LinkedinDraftPollField {
  id                  String            @id @default(uuid())
  created_at          DateTime          @default(now())
  index               Int
  text                String?
  draft_poll          LinkedinDraftPoll @relation(fields: [linkedinDraftPollId], references: [id], onDelete: Cascade)
  linkedinDraftPollId String

  @@index([linkedinDraftPollId])
}

model LinkedinDraftPoll {
  id                 String   @id @default(uuid())
  created_at         DateTime @default(now())
  posted             Boolean  @default(false)
  scheduled          Boolean  @default(false)
  duration           String   @default("ONE_DAY")
  text               String   @default("")
  // Post Options
  remove_url_preview Boolean  @default(false)

  auto_reshare        Boolean @default(false)
  reshare_metric      String  @default("Hours")
  reshare_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Hours")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  linkedin   Linkedin                 @relation(fields: [linkedinId], references: [id], onDelete: Cascade)
  linkedinId String
  fields     LinkedinDraftPollField[]

  @@index([linkedinId])
}

model Member {
  id             String      @id @default(uuid())
  userId         String?
  name           String?
  email          String
  isDisperseUser Boolean     @default(false)
  role           Member_role
  workspace      Workspace?  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String?

  @@index([userId])
  @@index([workspaceId])
}

model MonthUsage {
  id              String    @id @default(uuid())
  month           DateTime  @default(now())
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId     String    @unique
  amount          Int       @default(0)
  paid            Boolean   @default(false)
  guest_members   Int       @default(0)
  team_members    Int       @default(0)
  storage_mbytes  Int       @default(0)
  automation_runs Int       @default(0)

  @@index([workspaceId])
}

model Newsletter {
  id    String @id
  email String @unique
}

model PaymentMethod {
  id              String  @id @default(uuid())
  stripeConnected Boolean @default(false)
  paypalConnected Boolean @default(false)
}

model ResetPassword {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  email      String
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Slack {
  id                             String                           @id @default(uuid())
  access_token                   String                           @db.LongText
  scope                          String                           @db.LongText
  user_id                        String
  team_id                        String
  bot_user_id                    String
  bot_access_token               String
  workspace                      Workspace                        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                    String                           @unique
  AutomationSlackLinkedinPost    AutomationSlackLinkedinPost[]
  AutomationSlackDailyAnalytics  AutomationSlackDailyAnalytics[]
  AutomationSlackWeeklyAnalytics AutomationSlackWeeklyAnalytics[]
  AutomationSlackTwitterPost     AutomationSlackTwitterPost[]
  AutomationSlackInstagramPost   AutomationSlackInstagramPost[]
  AutomationSlackFacebookPost    AutomationSlackFacebookPost[]
  AutomationSlackYoutubePost     AutomationSlackYoutubePost[]
  AutomationSlackTiktokPost      AutomationSlackTiktokPost[]
  AutomationFacebookPostToSlack  AutomationFacebookPostToSlack[]
  AutomationInstagramToSlack     AutomationInstagramToSlack[]
  AutomationLinkedinToSlack      AutomationLinkedinToSlack[]
  AutomationTiktokToSlack        AutomationTiktokToSlack[]
  AutomationTwitterToSlack       AutomationTwitterToSlack[]
  AutomationYoutubeVideoToSlack  AutomationYoutubeVideoToSlack[]
  AutomationYoutubeShortToSlack  AutomationYoutubeShortToSlack[]
  AutomationTwitchStreamToSlack  AutomationTwitchStreamToSlack[]
}

model Statement {
  id                   String    @id @default(uuid())
  month                DateTime  @default(now())
  workspace            Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId          String
  automation_runs      Int       @default(0)
  guest_members        Int       @default(0)
  storage_usage_mbytes Int       @default(0)
  team_members         Int       @default(0)
  amount               Int       @default(0)
  plan                 String    @default("STARTER")
  paid                 Boolean   @default(false)

  @@index([workspaceId])
}

model TextBlock {
  id                String          @id @default(uuid())
  text              String?
  font              String          @default("Times New Roman")
  align             String          @default("left")
  bold              Boolean         @default(false)
  italic            Boolean         @default(false)
  underline         Boolean         @default(false)
  text_spacing      Int             @default(0)
  line_spacing      Int             @default(0)
  file              File?           @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId            String?
  contentTimeline   ContentTimeline @relation(fields: [contentTimelineId], references: [id], onDelete: Cascade)
  contentTimelineId String

  @@index([contentTimelineId])
  @@index([fileId])
}

model Tiktok {
  id                              String                            @id @default(uuid())
  created_at                      DateTime                          @default(now())
  access_token                    String
  access_token_expires_in         DateTime
  open_id                         String
  log_id                          String
  refresh_token                   String
  refresh_token_expires_in        DateTime
  workspace                       Workspace                         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                     String                            @unique
  views                           TiktokView[]
  shares                          TiktokShareCount[]
  likes                           TiktokLike[]
  followers                       TiktokFollower[]
  comments                        TiktokComment[]
  content_posted                  TiktokContentPosted[]
  AutomationDiscordTiktokPost     AutomationDiscordTiktokPost[]
  auto_reposts                    TiktokAutoRepost[]
  scheduled_content               TiktokScheduledContent[]
  posting_schedule                TiktokMyPostingSchedule[]
  AutomationSlackTiktokPost       AutomationSlackTiktokPost[]
  AutomationFacebookReelToTiktok  AutomationFacebookReelToTiktok[]
  AutomationInstagramReelToTiktok AutomationInstagramReelToTiktok[]
  AutomationLinkedinToTiktok      AutomationLinkedinToTiktok[]
  AutomationTiktokToSlack         AutomationTiktokToSlack[]
  AutomationTiktokToDiscord       AutomationTiktokToDiscord[]
  AutomationTiktokToYoutubeShorts AutomationTiktokToYoutubeShorts[]
  AutomationTiktokToTwitter       AutomationTiktokToTwitter[]
  AutomationTiktokToLinkedin      AutomationTiktokToLinkedin[]
  AutomationTiktokToInstagramReel AutomationTiktokToInstagramReel[]
  AutomationTiktokToFacebookReel  AutomationTiktokToFacebookReel[]
  AutomationTwitterToTiktok       AutomationTwitterToTiktok[]
  AutomationYoutubeShortToTiktok  AutomationYoutubeShortToTiktok[]
  AutomationPinterestTiktokPost   AutomationPinterestTiktokPost[]

  @@index([workspaceId])
}

model TiktokHashtagTrend {
  id              String   @id @default(uuid())
  date            DateTime
  rank            Int
  hashtag         String
  subtag          String
  posts           String
  views           String
  creator_1_image String?
  creator_1_url   String?
  creator_2_image String?
  creator_2_url   String?
  creator_3_image String?
  creator_3_url   String?
}

model TiktokVideoTrend {
  id   String   @id @default(uuid())
  date DateTime
  rank Int
  link String
}

model TiktokCreatorTrend {
  id        String   @id @default(uuid())
  date      DateTime
  rank      Int
  image     String
  name      String
  followers String
  link      String?
  likes     String
  video1    String?
  video2    String?
  video3    String?
}

model TiktokSongTrend {
  id     String   @id @default(uuid())
  date   DateTime
  rank   Int
  image  String
  name   String
  author String
  url    String
}

model TiktokMyPostingSchedule {
  id       String  @id @default(uuid())
  time     String
  timezone Int
  mon      Boolean @default(true)
  tue      Boolean @default(true)
  wed      Boolean @default(true)
  thu      Boolean @default(true)
  fri      Boolean @default(true)
  sat      Boolean @default(false)
  sun      Boolean @default(false)
  tiktok   Tiktok  @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId String

  @@index([tiktokId])
}

model TiktokScheduledContent {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime

  // Options
  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Hours")
  repost_input_value Int     @default(0)

  tiktok   Tiktok @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId String
  file     File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId   String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([tiktokId])
  @@index([fileId])
  @@index([userId])
}

model TiktokAutoRepost {
  id           String   @id @default(uuid())
  video        String
  metric       String
  metric_value Int
  action_time  DateTime
  file         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  tiktok       Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId     String
  fileId       String
  user         User?    @relation(fields: [userId], references: [id])
  userId       String?

  @@index([tiktokId])
  @@index([fileId])
  @@index([userId])
}

model TiktokComment {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  comments   Int
  tiktok     Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId   String

  @@index([tiktokId])
}

model TiktokFollower {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  followers  Int
  tiktok     Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId   String

  @@index([tiktokId])
  @@index([tiktokId, created_at])
}

model TiktokLike {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  likes      Int
  tiktok     Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId   String

  @@index([tiktokId])
}

model TiktokShareCount {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  shares     Int
  tiktok     Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId   String

  @@index([tiktokId])
}

model TiktokView {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  views      Int
  tiktok     Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId   String

  @@index([tiktokId])
  @@index([tiktokId, created_at])
}

model TwitterSecond {
  id String @id @default(uuid())
}

model Twitter {
  id                               String                             @id @default(uuid())
  userTwitterId                    String                             @unique
  created_at                       DateTime                           @default(now())
  token_type                       String
  dm_limit                         Int                                @default(0)
  refresh_token                    String
  access_token                     String
  scopes                           String
  expires_at                       String
  workspace                        Workspace                          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                      String                             @unique
  tweets                           TwitterTweets[]
  time_slots                       TwitterScheduleTimeSlot[]
  followers                        TwitterFollower[]
  impressions                      TwitterImpression[]
  link_clicks                      TwitterLinkClick[]
  profile_clicks                   TwitterProfileClick[]
  engagements                      TwitterEngagement[]
  tweet_drafts                     DraftTweet[]
  thread_drafts                    DraftThread[]
  DraftPoll                        DraftPoll[]
  DraftGiveaway                    DraftGiveaway[]
  engagement_removed_tweets        EngagementRemoveTweet[]
  content_posted                   TwitterContentPosted[]
  AutomationDiscordTwitterPost     AutomationDiscordTwitterPost[]
  posting_schedule                 TwitterMyPostingSchedule[]
  AutomationSlackTwitterPost       AutomationSlackTwitterPost[]
  AutomationInstagramToTwitter     AutomationInstagramToTwitter[]
  AutomationLinkedinToTwitter      AutomationLinkedinToTwitter[]
  AutomationTiktokToTwitter        AutomationTiktokToTwitter[]
  AutomationTwitterToSlack         AutomationTwitterToSlack[]
  AutomationTwitterToDiscord       AutomationTwitterToDiscord[]
  AutomationTwitterToLinkedin      AutomationTwitterToLinkedin[]
  AutomationTwitterToInstagram     AutomationTwitterToInstagram[]
  AutomationTwitterToInstagramReel AutomationTwitterToInstagramReel[]
  AutomationTwitterToTiktok        AutomationTwitterToTiktok[]
  AutomationTwitterToYoutubeShorts AutomationTwitterToYoutubeShorts[]
  AutomationTwitterToFacebook      AutomationTwitterToFacebook[]
  AutomationYoutubeShortToTwitter  AutomationYoutubeShortToTwitter[]
  AutomationFacebookPostToTwitter  AutomationFacebookPostToTwitter[]
  TwitterAutoRetweet               TwitterAutoRetweet[]
  TwitterAutoPlug                  TwitterAutoPlug[]
  TwitterAutoDm                    TwitterAutoDm[]
  ThreadDelayTweet                 ThreadDelayTweet[]
  TwitterScheduledTweets           TwitterScheduledTweet[]
  TwitterScheduledThread           TwitterScheduledThread[]
  TwitterScheduledPoll             TwitterScheduledPoll[]
  TwitterScheduledGiveaway         TwitterScheduledGiveaway[]
  ScheduledThreadTweet             ScheduledThreadTweet[]
  AutomationPinterestTwitterPost   AutomationPinterestTwitterPost[]
  AutomationTwitchStreamToTwitter  AutomationTwitchStreamToTwitter[]
}

model ScheduledThreadTweet {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  text           String?  @db.LongText()
  tweetId        String
  file           File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  twitter        Twitter? @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String?
  fileId         String?

  @@index([twitterId])
  @@index([fileId])
}

model TwitterScheduledTweet {
  id             String    @id @default(uuid())
  created_at     DateTime  @default(now())
  posted_at      DateTime?
  scheduled_time DateTime
  text           String?   @db.LongText

  remove_url_preview Boolean @default(false)

  auto_retweet        Boolean @default(false)
  retweet_metric      String  @default("Likes")
  retweet_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  auto_dm            Boolean @default(false)
  dm_like_checked    Boolean @default(false)
  dm_retweet_checked Boolean @default(false)
  dm_reply_checked   Boolean @default(false)
  dm_message         String  @default("")

  auto_dm_users TwitterAutoDmUsers[]

  twitter       Twitter         @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId     String
  file          File?           @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String?
  TwitterAutoDm TwitterAutoDm[]

  @@index([twitterId])
  @@index([fileId])
}

model TwitterScheduledThreadTweet {
  id                       String                  @id @default(uuid())
  created_at               DateTime                @default(now())
  scheduled_at             DateTime
  index                    Int
  text                     String?                 @db.LongText()
  draft_thread             TwitterScheduledThread? @relation(fields: [twitterScheduledThreadId], references: [id], onDelete: Cascade)
  twitterScheduledThreadId String?
  file                     File?                   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId                   String?

  @@index([twitterScheduledThreadId])
  @@index([fileId])
}

model TwitterScheduledThread {
  id             String                        @id @default(uuid())
  created_at     DateTime                      @default(now())
  scheduled_time DateTime
  draft_tweets   TwitterScheduledThreadTweet[]

  remove_url_preview Boolean @default(false)

  delay_tweets        Boolean @default(false)
  delay_tweets_metric String  @default("Minutes")
  delay_tweets_input  Int     @default(0)

  auto_retweet        Boolean @default(false)
  retweet_metric      String  @default("Likes")
  retweet_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  twitter   Twitter @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model TwitterScheduledPollField {
  id                     String                @id @default(uuid())
  created_at             DateTime              @default(now())
  index                  Int
  text                   String?
  draft_poll             TwitterScheduledPoll? @relation(fields: [twitterScheduledPollId], references: [id], onDelete: Cascade)
  twitterScheduledPollId String?

  @@index([twitterScheduledPollId])
}

model TwitterScheduledPoll {
  id              String                      @id @default(uuid())
  created_at      DateTime                    @default(now())
  scheduled_time  DateTime
  text            String?                     @db.LongText()
  duration_metric String                      @default("Hours")
  duration        Int                         @default(0)
  fields          TwitterScheduledPollField[]

  remove_url_preview Boolean @default(false)

  auto_retweet        Boolean @default(false)
  retweet_metric      String  @default("Likes")
  retweet_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  twitter   Twitter @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model TwitterScheduledGiveaway {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  scheduled_time DateTime
  twitter        Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId      String

  @@index([twitterId])
}

model TwitterAutoRetweet {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  tweet_id     String
  metric       String    @default("Likes")
  metric_value Int
  action_time  DateTime?
  twitter      Twitter   @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId    String

  @@index([twitterId])
}

model TwitterAutoPlug {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  active       Boolean   @default(true)
  tweet_id     String
  metric       String    @default("Likes")
  metric_value Int
  action_time  DateTime?
  message      String    @db.LongText
  twitter      Twitter   @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId    String

  @@index([twitterId])
}

model TwitterAutoDm {
  id                      String                 @id @default(uuid())
  created_at              DateTime               @default(now())
  tweet_id                String
  active                  Boolean                @default(true)
  message                 String                 @db.LongText
  like_checked            Boolean                @default(true)
  retweet_checked         Boolean                @default(true)
  reply_checked           Boolean                @default(true)
  twitter                 Twitter                @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId               String
  draftTweet              DraftTweet?            @relation(fields: [draftTweetId], references: [id])
  draftTweetId            String?
  scheduledTweet          TwitterScheduledTweet? @relation(fields: [twitterScheduledTweetId], references: [id])
  twitterScheduledTweetId String?

  @@index([twitterId])
  @@index([draftTweetId])
  @@index([twitterScheduledTweetId])
}

model ThreadDelayTweet {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  action_time  DateTime?
  metric       String    @default("Minutes")
  metric_value Int
  tweet        Twitter   @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId    String

  @@index([twitterId])
}

model TwitterMyPostingSchedule {
  id        String  @id @default(uuid())
  time      String
  timezone  Int
  mon       Boolean @default(true)
  tue       Boolean @default(true)
  wed       Boolean @default(true)
  thu       Boolean @default(true)
  fri       Boolean @default(true)
  sat       Boolean @default(false)
  sun       Boolean @default(false)
  twitter   Twitter @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model TwitterContentPosted {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  day         DateTime @default(now())
  tweet_type  String
  description String?
  twitter     Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId   String

  @@index([twitterId])
  @@index([twitterId, day])
}

model TiktokContentPosted {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  description String?
  tiktok      Tiktok   @relation(fields: [tiktokId], references: [id], onDelete: Cascade)
  tiktokId    String

  @@index([tiktokId])
  @@index([tiktokId, created_at])
}

model TwitterEngagement {
  id         String   @id @default(uuid())
  day        DateTime @default(now())
  engagement Int
  twitter    Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId  String

  @@index([twitterId])
}

model TwitterFollower {
  id        String   @id @default(uuid())
  day       DateTime @default(now())
  followers Int
  twitter   Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
  @@index([twitterId, day])
}

model TwitterImpression {
  id          String   @id @default(uuid())
  day         DateTime @default(now())
  impressions Int
  twitter     Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId   String

  @@index([twitterId])
  @@index([twitterId, day])
}

model TwitterLinkClick {
  id        String   @id @default(uuid())
  day       DateTime @default(now())
  clicks    Int
  twitter   Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model TwitterProfileClick {
  id        String   @id @default(uuid())
  day       DateTime @default(now())
  clicks    Int
  twitter   Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String

  @@index([twitterId])
}

model TwitterScheduleTimeSlot {
  id        String   @id @default(uuid())
  time_slot String
  mon       Boolean  @default(true)
  tue       Boolean  @default(true)
  wed       Boolean  @default(true)
  thu       Boolean  @default(true)
  fri       Boolean  @default(true)
  sat       Boolean  @default(false)
  sun       Boolean  @default(false)
  twitter   Twitter? @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId String?

  @@index([twitterId])
}

model TwitterTweets {
  id            String   @id @default(uuid())
  day           DateTime @default(now())
  tweets_number Int
  twitter       Twitter  @relation(fields: [twitterId], references: [id], onDelete: Cascade)
  twitterId     String

  @@index([twitterId])
}

model User {
  id                         String                     @id @default(uuid())
  name                       String?
  created_at                 DateTime                   @default(now())
  username                   String?                    @unique
  email                      String?                    @unique
  verifiedEmail              Boolean                    @default(false)
  timezone                   String?
  stripeCustomerId           String?
  stripeClientSecret         String?
  isActive                   Boolean                    @default(false)
  image                      String?
  password                   String?
  onboardingWhere            Boolean                    @default(false)
  onboardingWorkspace        Boolean                    @default(false)
  onboardingTeam             Boolean                    @default(false)
  onboardingSocials          Boolean                    @default(false)
  emailVerified              DateTime?
  email_weekly_analytics     Boolean                    @default(true)
  email_promotions_and_sales Boolean                    @default(true)
  email_workspace_errors     Boolean                    @default(true)
  email_new_teammembers      Boolean                    @default(true)
  marketing                  String?                    @default("")
  email_verified             Boolean                    @default(false)
  email_code                 String?
  last_login                 DateTime                   @default(now())
  workspaces                 Workspace[]
  workflows                  Workflow[]
  settings                   UserSettings?
  compositions               Composition[]
  comments                   Comment[]
  accounts                   Account[]
  file                       File[]
  sessions                   Session[]
  TiktokAutoRepost           TiktokAutoRepost[]
  TiktokScheduledContent     TiktokScheduledContent[]
  messages                   Message[]
  groups                     Group[]
  chats                      Chat[]
  affiliateviews             AffiliateViews[]
  affiliateuniquevisitors    AffiliateUniqueVisitors[]
  affiliatesssions           AffiliateSessions[]
  affiliateavgtimeonsite     AffiliateAvgTimeOnSite[]
  affiliatepaidconversions   AffiliatePaidConversions[]
  affiliatesignedup          AffiliateSignedUp[]
  affiliateconversionrate    AffiliateConversionRate[]
  payout_requested           Boolean                    @default(false)

  @@index([email])
}

model UserSettings {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VideoBlock {
  id                String          @id @default(uuid())
  file              File            @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId            String
  content_timeline  ContentTimeline @relation(fields: [contentTimelineId], references: [id], onDelete: Cascade)
  contentTimelineId String

  @@index([contentTimelineId])
  @@index([fileId])
}

model View {
  id            String  @id @default(uuid())
  isViewable    Boolean @default(false)
  allowDownload Boolean @default(true)
  file          File    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId        String  @unique
}

model Workflow {
  id          String    @id @default(uuid())
  name        String
  errors      String?
  executions  Int       @default(0)
  running     Boolean   @default(false)
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@index([creatorId])
  @@index([workspaceId])
}

model Workspace {
  id              String          @id @default(uuid())
  name            String?
  image           String?
  plan            Workspace_plan? @default(STARTER)
  description     String          @default("")
  size            String?
  industry        String?
  owner           User?           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String?
  workflows       Workflow[]
  tiktok          Tiktok?
  twitter         Twitter?
  statements      Statement[]
  slack           Slack?
  month_usage     MonthUsage?
  members         Member[]
  linkedin        Linkedin?
  instagram       Instagram?
  folders         Folder[]
  facebook        Facebook?
  discord         Discord?
  automation      Automation?
  all_views       AllViews?
  all_media_posts AllMediaPost?
  all_followers   AllFollowers?
  youtube         Youtube?

  // Payments
  payment_active    Boolean   @default(false)
  payment_type      String?
  next_payment_date DateTime?
  payment_duration  String?
  next_plan         String?

  paypal_subscription_id String?

  stripe_subscription_id String?
  stripe_price_id        String?
  InstagramPulled        InstagramPulled[]
  TwitterPulled          TwitterPulled[]
  YoutubePulled          YoutubePulled[]
  FacebookPulled         FacebookPulled[]
  LinkedinPulled         LinkedinPulled[]
  TiktokPulled           TiktokPulled[]

  twitter_client_id     String?
  twitter_client_secret String?

  pinterest      Pinterest?
  twitch         Twitch?
  TwitchPulled   TwitchPulled[]
  Dropbox        Dropbox[]
  GoogleDrive    GoogleDrive[]
  Snapchat       Snapchat[]
  Zoom           Zoom[]
  Box            Box[]
  Canva          Canva[]
  Figma          Figma[]
  TiktokError    TiktokError[]
  LinkedinError  LinkedinError[]
  YoutubeError   YoutubeError[]
  TwitterError   TwitterError[]
  FacebookError  FacebookError[]
  InstagramError InstagramError[]

  @@index([ownerId])
  @@index([id])
}

model Pinterest {
  id                               String                             @id @default(uuid())
  access_token                     String                             @db.LongText
  refresh_token                    String                             @db.LongText
  expires_in                       DateTime
  refresh_token_expires_in         DateTime
  scopes                           String                             @db.LongText
  workspace                        Workspace                          @relation(fields: [workspaceId], references: [id])
  workspaceId                      String                             @unique
  AutomationPinterestTwitterPost   AutomationPinterestTwitterPost[]
  AutomationPinterestYoutubeShort  AutomationPinterestYoutubeShort[]
  AutomationPinterestLinkedinPost  AutomationPinterestLinkedinPost[]
  AutomationPinterestTiktokPost    AutomationPinterestTiktokPost[]
  AutomationPinterestFacebookPost  AutomationPinterestFacebookPost[]
  AutomationPinterestInstagramPost AutomationPinterestInstagramPost[]

  @@index([workspaceId])
}

model Twitch {
  id                               String                             @id @default(uuid())
  user_id                          String?
  access_token                     String                             @db.LongText
  expires_in                       DateTime
  refresh_token                    String                             @db.LongText
  workspace                        Workspace                          @relation(fields: [workspaceId], references: [id])
  workspaceId                      String                             @unique
  AutomationTwitchStreamToSlack    AutomationTwitchStreamToSlack[]
  AutomationTwitchStreamToDiscord  AutomationTwitchStreamToDiscord[]
  AutomationTwitchStreamToTwitter  AutomationTwitchStreamToTwitter[]
  AutomationTwitchStreamToLinkedin AutomationTwitchStreamToLinkedin[]
  AutomationTwitchStreamToFacebook AutomationTwitchStreamToFacebook[]

  @@index([workspaceId])
}

model InstagramPulled {
  id          String    @id @default(uuid())
  post_id     String
  caption     String?   @db.LongText
  posted_at   DateTime
  media_url   String    @db.LongText
  media_type  String
  permalink   String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model TwitchPulled {
  id           String    @id @default(uuid())
  stream_id    String
  user_id      String
  display_name String
  started_at   DateTime
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String

  @@index([workspaceId])
}

model TwitterPulled {
  id          String    @id @default(uuid())
  username    String
  created_at  DateTime
  tweet_id    String
  text        String?
  media_keys  String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model YoutubePulled {
  id           String    @id @default(uuid())
  video_id     String
  title        String?   @db.LongText
  description  String?   @db.LongText
  duration     Int
  published_at DateTime
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String

  @@index([workspaceId])
}

model FacebookPulled {
  id             String    @id @default(uuid())
  created_at     DateTime  @default(now())
  full_picture   String?   @db.LongText
  permalink_url  String    @db.LongText
  post_id        String
  type           String    @db.LongText
  message        String?
  attachment_url String?   @db.LongText
  workspace      Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId    String

  @@index([workspaceId])
}

model LinkedinPulled {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model TiktokPulled {
  id              String    @id @default(uuid())
  video_id        String
  title           String
  cover_image_url String    @db.LongText
  duration        Int
  create_time     DateTime
  embed_link      String    @db.LongText
  share_url       String    @db.LongText
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId     String

  @@index([workspaceId])
}

model Youtube {
  id                                    String                                  @id @default(uuid())
  access_token                          String                                  @db.LongText
  refresh_token                         String                                  @db.LongText
  scopes                                String
  runs_today                            Int                                     @default(0)
  expiry_date                           DateTime
  workspace                             Workspace                               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId                           String                                  @unique
  watch_time                            YoutubeWatchTime[]
  watch_duration                        YoutubeWatchDuration[]
  views                                 YoutubeView[]
  videos                                YoutubeVideo[]
  subscribers                           YoutubeSubscriber[]
  shares                                YoutubeShare[]
  likes                                 YoutubeLike[]
  impressions                           YoutubeImpression[]
  comments                              YoutubeComment[]
  dislikes                              YoutubeDislike[]
  content_posted                        YoutubeContentPosted[]
  video_drafts                          YoutubeVideoDraft[]
  shorts_drafts                         YoutubeShortsDraft[]
  AutomationDiscordYoutubePost          AutomationDiscordYoutubePost[]
  posting_schedule                      YoutubeMyPostingSchedule[]
  AutomationSlackYoutubePost            AutomationSlackYoutubePost[]
  AutomationFacebookReelToYoutubeShort  AutomationFacebookReelToYoutubeShort[]
  AutomationInstagramReelToYoutubeShort AutomationInstagramReelToYoutubeShort[]
  AutomationLinkedinToYoutubeShort      AutomationLinkedinToYoutubeShort[]
  AutomationTiktokToYoutubeShorts       AutomationTiktokToYoutubeShorts[]
  AutomationTwitterToYoutubeShorts      AutomationTwitterToYoutubeShorts[]
  AutomationYoutubeVideoToSlack         AutomationYoutubeVideoToSlack[]
  AutomationYoutubeShortToSlack         AutomationYoutubeShortToSlack[]
  AutomationYoutubeVideoToDiscord       AutomationYoutubeVideoToDiscord[]
  AutomationYoutubeShortToDiscord       AutomationYoutubeShortToDiscord[]
  AutomationYoutubeShortToTiktok        AutomationYoutubeShortToTiktok[]
  AutomationYoutubeShortToInstagramReel AutomationYoutubeShortToInstagramReel[]
  AutomationYoutubeShortToTwitter       AutomationYoutubeShortToTwitter[]
  AutomationYoutubeShortToLinkedin      AutomationYoutubeShortToLinkedin[]
  AutomationYoutubeShortToFacebookReel  AutomationYoutubeShortToFacebookReel[]
  YoutubeScheduledVideo                 YoutubeScheduledVideo[]
  YoutubeScheduledShort                 YoutubeScheduledShort[]
  auto_repost                           YoutubeAutoRepost[]
  auto_plug                             YoutubeAutoPlug[]
  AutomationPinterestYoutubeShort       AutomationPinterestYoutubeShort[]
}

model YoutubeAutoPlug {
  id          String    @id @default(uuid())
  active      Boolean   @default(true)
  metric      String
  metricValue Int
  created_at  DateTime  @default(now())
  action_time DateTime?
  video_id    String
  text        String
  youtube     Youtube   @relation(fields: [youtubeId], references: [id])
  youtubeId   String

  @@index([youtubeId])
}

model YoutubeAutoRepost {
  id              String    @id @default(uuid())
  created_at      DateTime  @default(now())
  active          Boolean   @default(true)
  type            String
  action_time     DateTime?
  metric          String
  metricValue     Int
  title           String?   @db.LongText
  privacy         String?   @default("public")
  description     String?   @db.LongText
  for_kids        Boolean   @default(false)
  tags            String?   @db.LongText
  language        String?
  category        String?
  youtube         Youtube   @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String
  file            File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId          String?
  thumbnailFileId String?

  @@index([youtubeId])
  @@index([fileId])
}

model YoutubeScheduledVideo {
  id              String   @id @default(uuid())
  scheduled_time  DateTime
  created_at      DateTime @default(now())
  title           String?  @db.LongText
  privacy         String?  @default("public")
  description     String?  @db.LongText
  for_kids        Boolean  @default(false)
  tags            String?  @db.LongText
  language        String?
  category        String?
  youtube         Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String
  file            File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId          String?
  thumbnailFileId String?

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  @@index([fileId])
  @@index([youtubeId])
}

model YoutubeScheduledShort {
  id              String   @id @default(uuid())
  scheduled_time  DateTime
  created_at      DateTime @default(now())
  title           String?  @db.LongText
  privacy         String?  @default("public")
  description     String?  @db.LongText
  for_kids        Boolean  @default(false)
  tags            String?  @db.LongText
  language        String?
  category        String?
  youtube         Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String
  file            File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId          String?
  thumbnailFileId String?

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  @@index([fileId])
  @@index([youtubeId])
}

model YoutubeMyPostingSchedule {
  id        String  @id @default(uuid())
  time      String
  timezone  Int
  mon       Boolean @default(true)
  tue       Boolean @default(true)
  wed       Boolean @default(true)
  thu       Boolean @default(true)
  fri       Boolean @default(true)
  sat       Boolean @default(false)
  sun       Boolean @default(false)
  youtube   Youtube @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId String

  @@index([youtubeId])
}

model YoutubeVideoDraft {
  id              String   @id @default(uuid())
  posted          Boolean  @default(false)
  scheduled       Boolean  @default(false)
  created_at      DateTime @default(now())
  title           String?  @db.LongText
  privacy         String   @default("public")
  description     String?  @db.LongText
  for_kids        Boolean  @default(false)
  tags            String?  @db.LongText
  language        String?
  category        String?
  youtube         Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String
  file            File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId          String?
  thumbnailFileId String?

  // Options
  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  @@index([youtubeId])
  @@index([fileId])
}

model YoutubeShortsDraft {
  id              String   @id @default(uuid())
  created_at      DateTime @default(now())
  posted          Boolean  @default(false)
  scheduled       Boolean  @default(false)
  title           String?
  privacy         String?  @default("public")
  description     String?
  tags            String?
  for_kids        Boolean  @default(false)
  language        String?
  category        String?
  youtube         Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId       String
  file            File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId          String?
  thumbnailFileId String?

  auto_repost        Boolean @default(false)
  repost_metric      String  @default("Likes")
  repost_input_value Int     @default(0)

  auto_plug        Boolean @default(false)
  plug_metric      String  @default("Likes")
  plug_input_value Int     @default(0)
  plug_text        String  @default("")

  @@index([youtubeId])
  @@index([fileId])
}

model YoutubeContentPosted {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  description String?
  youtube     Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId   String

  @@index([youtubeId])
  @@index([youtubeId, created_at])
}

model YoutubeComment {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  comments   Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
}

model YoutubeDislike {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  dislikes   Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
}

model YoutubeImpression {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  impressions Int
  youtube     Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId   String

  @@index([youtubeId])
}

model YoutubeLike {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  likes      Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
}

model YoutubeShare {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  shares     Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
}

model YoutubeSubscriber {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  subscribers Int
  youtube     Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId   String

  @@index([youtubeId])
  @@index([youtubeId, created_at])
}

model YoutubeVideo {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  videos     Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
}

model YoutubeView {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  views      Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
  @@index([youtubeId, created_at])
}

model YoutubeWatchDuration {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  watch_duration Int
  youtube        Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId      String

  @@index([youtubeId])
}

model YoutubeWatchTime {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  watch_time Int
  youtube    Youtube  @relation(fields: [youtubeId], references: [id], onDelete: Cascade)
  youtubeId  String

  @@index([youtubeId])
}

model Group {
  id       String    @id @default(uuid())
  users    User[]
  messages Message[]
}

model Chat {
  id       String    @id @default(uuid())
  messages Message[]
  users    User[]
}

model Message {
  id          String    @id @default(uuid())
  content     String    @db.LongText
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  seenAt      DateTime?
  chat        Chat?     @relation(fields: [chatId], references: [id])
  chatId      String?
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@index([chatId])
  @@index([groupId])
  @@index([userId])
}

enum Workspace_plan {
  STARTER
  PRO
  TEAM
  ENTERPRISE
}

enum Member_role {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model Dropbox {
  id            String    @id @default(uuid())
  access_token  String    @db.LongText
  expires_in    DateTime
  refresh_token String    @db.LongText
  scope         String    @db.LongText
  uid           String
  account_id    String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String    @unique

  @@index([workspaceId])
}

model GoogleDrive {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique

  @@index([workspaceId])
}

model Snapchat {
  id            String    @id @default(uuid())
  access_token  String    @db.LongText
  refresh_token String    @db.LongText
  expires_in    DateTime
  scope         String    @db.LongText
  token_type    String
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String    @unique

  @@index([workspaceId])
}

model Zoom {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique

  @@index([workspaceId])
}

model Box {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique

  @@index([workspaceId])
}

model Canva {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique

  @@index([workspaceId])
}

model Figma {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique

  @@index([workspaceId])
}

model Error {
  id           String   @id @default(uuid())
  created_at   DateTime @default(now())
  fixed        Boolean  @default(false)
  format       String?  @default("backend")
  endpoint     String   @db.LongText
  message      String?  @db.LongText
  workspaceId  String?  @db.LongText
  userId       String?  @db.LongText
  projectId    String?  @db.LongText
  fileId       String?  @db.LongText
  draftId      String?  @db.LongText
  automationId String?  @db.LongText
  workflowId   String?  @db.LongText
  scheduledId  String?  @db.LongText
}

model YoutubeError {
  id          String    @id @default(uuid())
  message     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model TwitterError {
  id          String    @id @default(uuid())
  message     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model FacebookError {
  id          String    @id @default(uuid())
  message     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model InstagramError {
  id          String    @id @default(uuid())
  message     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model LinkedinError {
  id          String    @id @default(uuid())
  message     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model TiktokError {
  id          String    @id @default(uuid())
  message     String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
}

model AffiliateViews {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  views      BigInt
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model AffiliateUniqueVisitors {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  visitors   BigInt
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model AffiliateSessions {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  sessions   BigInt
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model AffiliateAvgTimeOnSite {
  id            String   @id @default(uuid())
  created_at    DateTime @default(now())
  avgTimeOnSite BigInt
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId])
}

model AffiliatePaidConversions {
  id              String   @id @default(uuid())
  created_at      DateTime @default(now())
  paidConversions BigInt
  user            User     @relation(fields: [userId], references: [id])
  userId          String

  @@index([userId])
}

model AffiliateSignedUp {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  users      BigInt
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model AffiliateConversionRate {
  id             String   @id @default(uuid())
  created_at     DateTime @default(now())
  conversionRate Float
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@index([userId])
}
